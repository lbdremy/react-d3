{"version":3,"names":[],"mappings":"","sources":["react-d3.js"],"sourcesContent":["!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{var f;\"undefined\"!=typeof window?f=window:\"undefined\"!=typeof global?f=global:\"undefined\"!=typeof self&&(f=self),f.rd3=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nexports.BarChart = require('./barchart').BarChart;\nexports.LineChart = require('./linechart').LineChart;\nexports.PieChart = require('./piechart').PieChart;\nexports.AreaChart = require('./areachart').AreaChart;\nexports.Treemap = require('./treemap').Treemap;\nexports.ScatterChart = require('./scatterchart').ScatterChart;\nexports.CandlestickChart = require('./candlestick').CandlestickChart;\n\n\n\n},{\"./areachart\":12,\"./barchart\":16,\"./candlestick\":21,\"./linechart\":39,\"./piechart\":45,\"./scatterchart\":49,\"./treemap\":53}],2:[function(require,module,exports){\nvar Structure = require('./src/structure');\n\nfunction Immstruct () {\n  if (!(this instanceof Immstruct)) {\n    return new Immstruct();\n  }\n\n  this.instances = {};\n}\n\nImmstruct.prototype.get = function (key, data) {\n  return getInstance(this, {\n    key: key,\n    data: data\n  });\n};\n\nImmstruct.prototype.clear = function () {\n  this.instances = {};\n};\n\nImmstruct.prototype.remove = function (key) {\n  return delete this.instances[key];\n};\n\nImmstruct.prototype.withHistory = function (key, data) {\n  return getInstance(this, {\n    key: key,\n    data: data,\n    history: true\n  });\n};\n\nvar inst = new Immstruct();\n\nmodule.exports = function (key, data) {\n  return getInstance(inst, {\n    key: key,\n    data: data\n  });\n};\n\nmodule.exports.withHistory = function (key, data) {\n  return getInstance(inst, {\n    key: key,\n    data: data,\n    history: true\n  });\n};\n\nmodule.exports.Structure = Structure;\nmodule.exports.Immstruct = Immstruct;\nmodule.exports.clear = inst.clear.bind(inst);\nmodule.exports.remove = inst.remove.bind(inst);\nObject.defineProperty(module.exports, 'instances', {\n  get: function() { return inst.instances; },\n  enumerable: true,\n  configurable: true\n});\n\nfunction getInstance (obj, options) {\n  if (typeof options.key === 'object') {\n    options.data = options.key;\n    options.key = void 0;\n  }\n\n  if (options.key && obj.instances[options.key]) {\n    return obj.instances[options.key];\n  }\n\n  var newInstance = new Structure(options);\n  obj.instances[newInstance.key] = newInstance;\n  return newInstance;\n}\n},{\"./src/structure\":7}],3:[function(require,module,exports){\n'use strict';\n\n/**\n * Representation of a single EventEmitter function.\n *\n * @param {Function} fn Event handler to be called.\n * @param {Mixed} context Context for function execution.\n * @param {Boolean} once Only emit once\n * @api private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Minimal EventEmitter interface that is molded against the Node.js\n * EventEmitter interface.\n *\n * @constructor\n * @api public\n */\nfunction EventEmitter() { /* Nothing to set */ }\n\n/**\n * Holds the assigned EventEmitters by name.\n *\n * @type {Object}\n * @private\n */\nEventEmitter.prototype._events = undefined;\n\n/**\n * Return a list of assigned event listeners.\n *\n * @param {String} event The events that should be listed.\n * @returns {Array}\n * @api public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  if (!this._events || !this._events[event]) return [];\n  if (this._events[event].fn) return [this._events[event].fn];\n\n  for (var i = 0, l = this._events[event].length, ee = new Array(l); i < l; i++) {\n    ee[i] = this._events[event][i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Emit an event to all registered event listeners.\n *\n * @param {String} event The name of the event.\n * @returns {Boolean} Indication if we've emitted an event.\n * @api public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  if (!this._events || !this._events[event]) return false;\n\n  var listeners = this._events[event]\n    , len = arguments.length\n    , args\n    , i;\n\n  if ('function' === typeof listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Register a new EventListener for the given event.\n *\n * @param {String} event Name of the event.\n * @param {Functon} fn Callback function.\n * @param {Mixed} context The context of the function.\n * @api public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  var listener = new EE(fn, context || this);\n\n  if (!this._events) this._events = {};\n  if (!this._events[event]) this._events[event] = listener;\n  else {\n    if (!this._events[event].fn) this._events[event].push(listener);\n    else this._events[event] = [\n      this._events[event], listener\n    ];\n  }\n\n  return this;\n};\n\n/**\n * Add an EventListener that's only called once.\n *\n * @param {String} event Name of the event.\n * @param {Function} fn Callback function.\n * @param {Mixed} context The context of the function.\n * @api public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  var listener = new EE(fn, context || this, true);\n\n  if (!this._events) this._events = {};\n  if (!this._events[event]) this._events[event] = listener;\n  else {\n    if (!this._events[event].fn) this._events[event].push(listener);\n    else this._events[event] = [\n      this._events[event], listener\n    ];\n  }\n\n  return this;\n};\n\n/**\n * Remove event listeners.\n *\n * @param {String} event The event we want to remove.\n * @param {Function} fn The listener that we need to find.\n * @param {Boolean} once Only remove once listeners.\n * @api public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, once) {\n  if (!this._events || !this._events[event]) return this;\n\n  var listeners = this._events[event]\n    , events = [];\n\n  if (fn) {\n    if (listeners.fn && (listeners.fn !== fn || (once && !listeners.once))) {\n      events.push(listeners);\n    }\n    if (!listeners.fn) for (var i = 0, length = listeners.length; i < length; i++) {\n      if (listeners[i].fn !== fn || (once && !listeners[i].once)) {\n        events.push(listeners[i]);\n      }\n    }\n  }\n\n  //\n  // Reset the array, or remove it completely if we have no more listeners.\n  //\n  if (events.length) {\n    this._events[event] = events.length === 1 ? events[0] : events;\n  } else {\n    delete this._events[event];\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners or only the listeners for the specified event.\n *\n * @param {String} event The event want to remove all listeners for.\n * @api public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  if (!this._events) return this;\n\n  if (event) delete this._events[event];\n  else this._events = {};\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// This function doesn't apply anymore.\n//\nEventEmitter.prototype.setMaxListeners = function setMaxListeners() {\n  return this;\n};\n\n//\n// Expose the module.\n//\nEventEmitter.EventEmitter = EventEmitter;\nEventEmitter.EventEmitter2 = EventEmitter;\nEventEmitter.EventEmitter3 = EventEmitter;\n\n//\n// Expose the module.\n//\nmodule.exports = EventEmitter;\n\n},{}],4:[function(require,module,exports){\n/**\n *  Copyright (c) 2014-2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/**\n * Cursor is expected to be required in a node or other CommonJS context:\n *\n *     var Cursor = require('immutable/contrib/cursor');\n *\n * If you wish to use it in the browser, please check out Browserify or WebPack!\n */\n\nvar Immutable = require('immutable');\nvar Iterable = Immutable.Iterable;\nvar Iterator = Iterable.Iterator;\nvar Seq = Immutable.Seq;\nvar Map = Immutable.Map;\n\n\nfunction cursorFrom(rootData, keyPath, onChange) {\n  if (arguments.length === 1) {\n    keyPath = [];\n  } else if (typeof keyPath === 'function') {\n    onChange = keyPath;\n    keyPath = [];\n  } else {\n    keyPath = valToKeyPath(keyPath);\n  }\n  return makeCursor(rootData, keyPath, onChange);\n}\n\n\nvar KeyedCursorPrototype = Object.create(Seq.Keyed.prototype);\nvar IndexedCursorPrototype = Object.create(Seq.Indexed.prototype);\n\nfunction KeyedCursor(rootData, keyPath, onChange, size) {\n  this.size = size;\n  this._rootData = rootData;\n  this._keyPath = keyPath;\n  this._onChange = onChange;\n}\nKeyedCursorPrototype.constructor = KeyedCursor;\n\nfunction IndexedCursor(rootData, keyPath, onChange, size) {\n  this.size = size;\n  this._rootData = rootData;\n  this._keyPath = keyPath;\n  this._onChange = onChange;\n}\nIndexedCursorPrototype.constructor = IndexedCursor;\n\nKeyedCursorPrototype.toString = function() {\n  return this.__toString('Cursor {', '}');\n}\nIndexedCursorPrototype.toString = function() {\n  return this.__toString('Cursor [', ']');\n}\n\nKeyedCursorPrototype.deref =\nKeyedCursorPrototype.valueOf =\nIndexedCursorPrototype.deref =\nIndexedCursorPrototype.valueOf = function(notSetValue) {\n  return this._rootData.getIn(this._keyPath, notSetValue);\n}\n\nKeyedCursorPrototype.get =\nIndexedCursorPrototype.get = function(key, notSetValue) {\n  return this.getIn([key], notSetValue);\n}\n\nKeyedCursorPrototype.getIn =\nIndexedCursorPrototype.getIn = function(keyPath, notSetValue) {\n  keyPath = listToKeyPath(keyPath);\n  if (keyPath.length === 0) {\n    return this;\n  }\n  var value = this._rootData.getIn(newKeyPath(this._keyPath, keyPath), NOT_SET);\n  return value === NOT_SET ? notSetValue : wrappedValue(this, keyPath, value);\n}\n\nIndexedCursorPrototype.set =\nKeyedCursorPrototype.set = function(key, value) {\n  return updateCursor(this, function (m) { return m.set(key, value); }, [key]);\n}\n\nIndexedCursorPrototype.setIn =\nKeyedCursorPrototype.setIn = Map.prototype.setIn;\n\nKeyedCursorPrototype.remove =\nKeyedCursorPrototype['delete'] =\nIndexedCursorPrototype.remove =\nIndexedCursorPrototype['delete'] = function(key) {\n  return updateCursor(this, function (m) { return m.remove(key); }, [key]);\n}\n\nIndexedCursorPrototype.removeIn =\nIndexedCursorPrototype.deleteIn =\nKeyedCursorPrototype.removeIn =\nKeyedCursorPrototype.deleteIn = Map.prototype.deleteIn;\n\nKeyedCursorPrototype.clear =\nIndexedCursorPrototype.clear = function() {\n  return updateCursor(this, function (m) { return m.clear(); });\n}\n\nIndexedCursorPrototype.update =\nKeyedCursorPrototype.update = function(keyOrFn, notSetValue, updater) {\n  return arguments.length === 1 ?\n    updateCursor(this, keyOrFn) :\n    this.updateIn([keyOrFn], notSetValue, updater);\n}\n\nIndexedCursorPrototype.updateIn =\nKeyedCursorPrototype.updateIn = function(keyPath, notSetValue, updater) {\n  return updateCursor(this, function (m) {\n    return m.updateIn(keyPath, notSetValue, updater);\n  }, keyPath);\n}\n\nIndexedCursorPrototype.merge =\nKeyedCursorPrototype.merge = function(/*...iters*/) {\n  var args = arguments;\n  return updateCursor(this, function (m) {\n    return m.merge.apply(m, args);\n  });\n}\n\nIndexedCursorPrototype.mergeWith =\nKeyedCursorPrototype.mergeWith = function(merger/*, ...iters*/) {\n  var args = arguments;\n  return updateCursor(this, function (m) {\n    return m.mergeWith.apply(m, args);\n  });\n}\n\nIndexedCursorPrototype.mergeIn =\nKeyedCursorPrototype.mergeIn = Map.prototype.mergeIn;\n\nIndexedCursorPrototype.mergeDeep =\nKeyedCursorPrototype.mergeDeep = function(/*...iters*/) {\n  var args = arguments;\n  return updateCursor(this, function (m) {\n    return m.mergeDeep.apply(m, args);\n  });\n}\n\nIndexedCursorPrototype.mergeDeepWith =\nKeyedCursorPrototype.mergeDeepWith = function(merger/*, ...iters*/) {\n  var args = arguments;\n  return updateCursor(this, function (m) {\n    return m.mergeDeepWith.apply(m, args);\n  });\n}\n\nIndexedCursorPrototype.mergeDeepIn =\nKeyedCursorPrototype.mergeDeepIn = Map.prototype.mergeDeepIn;\n\nKeyedCursorPrototype.withMutations =\nIndexedCursorPrototype.withMutations = function(fn) {\n  return updateCursor(this, function (m) {\n    return (m || Map()).withMutations(fn);\n  });\n}\n\nKeyedCursorPrototype.cursor =\nIndexedCursorPrototype.cursor = function(subKeyPath) {\n  subKeyPath = valToKeyPath(subKeyPath);\n  return subKeyPath.length === 0 ? this : subCursor(this, subKeyPath);\n}\n\n/**\n * All iterables need to implement __iterate\n */\nKeyedCursorPrototype.__iterate =\nIndexedCursorPrototype.__iterate = function(fn, reverse) {\n  var cursor = this;\n  var deref = cursor.deref();\n  return deref && deref.__iterate ? deref.__iterate(\n    function (v, k) { return fn(wrappedValue(cursor, [k], v), k, cursor); },\n    reverse\n  ) : 0;\n}\n\n/**\n * All iterables need to implement __iterator\n */\nKeyedCursorPrototype.__iterator =\nIndexedCursorPrototype.__iterator = function(type, reverse) {\n  var deref = this.deref();\n  var cursor = this;\n  var iterator = deref && deref.__iterator &&\n    deref.__iterator(Iterator.ENTRIES, reverse);\n  return new Iterator(function () {\n    if (!iterator) {\n      return { value: undefined, done: true };\n    }\n    var step = iterator.next();\n    if (step.done) {\n      return step;\n    }\n    var entry = step.value;\n    var k = entry[0];\n    var v = wrappedValue(cursor, [k], entry[1]);\n    return {\n      value: type === Iterator.KEYS ? k : type === Iterator.VALUES ? v : [k, v],\n      done: false\n    };\n  });\n}\n\nKeyedCursor.prototype = KeyedCursorPrototype;\nIndexedCursor.prototype = IndexedCursorPrototype;\n\n\nvar NOT_SET = {}; // Sentinel value\n\nfunction makeCursor(rootData, keyPath, onChange, value) {\n  if (arguments.length < 4) {\n    value = rootData.getIn(keyPath);\n  }\n  var size = value && value.size;\n  var CursorClass = Iterable.isIndexed(value) ? IndexedCursor : KeyedCursor;\n  return new CursorClass(rootData, keyPath, onChange, size);\n}\n\nfunction wrappedValue(cursor, keyPath, value) {\n  return Iterable.isIterable(value) ? subCursor(cursor, keyPath, value) : value;\n}\n\nfunction subCursor(cursor, keyPath, value) {\n  return makeCursor(\n    cursor._rootData,\n    newKeyPath(cursor._keyPath, keyPath),\n    cursor._onChange,\n    value\n  );\n}\n\nfunction updateCursor(cursor, changeFn, changeKeyPath) {\n  var deepChange = arguments.length > 2;\n  var newRootData = cursor._rootData.updateIn(\n    cursor._keyPath,\n    deepChange ? Map() : undefined,\n    changeFn\n  );\n  var keyPath = cursor._keyPath || [];\n  var result = cursor._onChange && cursor._onChange.call(\n    undefined,\n    newRootData,\n    cursor._rootData,\n    deepChange ? newKeyPath(keyPath, changeKeyPath) : keyPath\n  );\n  if (result !== undefined) {\n    newRootData = result;\n  }\n  return makeCursor(newRootData, cursor._keyPath, cursor._onChange);\n}\n\nfunction newKeyPath(head, tail) {\n  return head.concat(listToKeyPath(tail));\n}\n\nfunction listToKeyPath(list) {\n  return Array.isArray(list) ? list : Immutable.Iterable(list).toArray();\n}\n\nfunction valToKeyPath(val) {\n  return Array.isArray(val) ? val :\n    Iterable.isIterable(val) ? val.toArray() :\n    [val];\n}\n\nexports.from = cursorFrom;\n\n},{\"immutable\":5}],5:[function(require,module,exports){\n/**\n *  Copyright (c) 2014-2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  global.Immutable = factory()\n}(this, function () { 'use strict';var SLICE$0 = Array.prototype.slice;\n\n  function createClass(ctor, superClass) {\n    if (superClass) {\n      ctor.prototype = Object.create(superClass.prototype);\n    }\n    ctor.prototype.constructor = ctor;\n  }\n\n  // Used for setting prototype methods that IE8 chokes on.\n  var DELETE = 'delete';\n\n  // Constants describing the size of trie nodes.\n  var SHIFT = 5; // Resulted in best performance after ______?\n  var SIZE = 1 << SHIFT;\n  var MASK = SIZE - 1;\n\n  // A consistent shared value representing \"not set\" which equals nothing other\n  // than itself, and nothing that could be provided externally.\n  var NOT_SET = {};\n\n  // Boolean references, Rough equivalent of `bool &`.\n  var CHANGE_LENGTH = { value: false };\n  var DID_ALTER = { value: false };\n\n  function MakeRef(ref) {\n    ref.value = false;\n    return ref;\n  }\n\n  function SetRef(ref) {\n    ref && (ref.value = true);\n  }\n\n  // A function which returns a value representing an \"owner\" for transient writes\n  // to tries. The return value will only ever equal itself, and will not equal\n  // the return of any subsequent call of this function.\n  function OwnerID() {}\n\n  // http://jsperf.com/copy-array-inline\n  function arrCopy(arr, offset) {\n    offset = offset || 0;\n    var len = Math.max(0, arr.length - offset);\n    var newArr = new Array(len);\n    for (var ii = 0; ii < len; ii++) {\n      newArr[ii] = arr[ii + offset];\n    }\n    return newArr;\n  }\n\n  function ensureSize(iter) {\n    if (iter.size === undefined) {\n      iter.size = iter.__iterate(returnTrue);\n    }\n    return iter.size;\n  }\n\n  function wrapIndex(iter, index) {\n    return index >= 0 ? (+index) : ensureSize(iter) + (+index);\n  }\n\n  function returnTrue() {\n    return true;\n  }\n\n  function wholeSlice(begin, end, size) {\n    return (begin === 0 || (size !== undefined && begin <= -size)) &&\n      (end === undefined || (size !== undefined && end >= size));\n  }\n\n  function resolveBegin(begin, size) {\n    return resolveIndex(begin, size, 0);\n  }\n\n  function resolveEnd(end, size) {\n    return resolveIndex(end, size, size);\n  }\n\n  function resolveIndex(index, size, defaultIndex) {\n    return index === undefined ?\n      defaultIndex :\n      index < 0 ?\n        Math.max(0, size + index) :\n        size === undefined ?\n          index :\n          Math.min(size, index);\n  }\n\n  function Iterable(value) {\n      return isIterable(value) ? value : Seq(value);\n    }\n\n\n  createClass(KeyedIterable, Iterable);\n    function KeyedIterable(value) {\n      return isKeyed(value) ? value : KeyedSeq(value);\n    }\n\n\n  createClass(IndexedIterable, Iterable);\n    function IndexedIterable(value) {\n      return isIndexed(value) ? value : IndexedSeq(value);\n    }\n\n\n  createClass(SetIterable, Iterable);\n    function SetIterable(value) {\n      return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);\n    }\n\n\n\n  function isIterable(maybeIterable) {\n    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);\n  }\n\n  function isKeyed(maybeKeyed) {\n    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);\n  }\n\n  function isIndexed(maybeIndexed) {\n    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);\n  }\n\n  function isAssociative(maybeAssociative) {\n    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n  }\n\n  function isOrdered(maybeOrdered) {\n    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);\n  }\n\n  Iterable.isIterable = isIterable;\n  Iterable.isKeyed = isKeyed;\n  Iterable.isIndexed = isIndexed;\n  Iterable.isAssociative = isAssociative;\n  Iterable.isOrdered = isOrdered;\n\n  Iterable.Keyed = KeyedIterable;\n  Iterable.Indexed = IndexedIterable;\n  Iterable.Set = SetIterable;\n\n\n  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\n  /* global Symbol */\n\n  var ITERATE_KEYS = 0;\n  var ITERATE_VALUES = 1;\n  var ITERATE_ENTRIES = 2;\n\n  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator';\n\n  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\n\n\n  function src_Iterator__Iterator(next) {\n      this.next = next;\n    }\n\n    src_Iterator__Iterator.prototype.toString = function() {\n      return '[Iterator]';\n    };\n\n\n  src_Iterator__Iterator.KEYS = ITERATE_KEYS;\n  src_Iterator__Iterator.VALUES = ITERATE_VALUES;\n  src_Iterator__Iterator.ENTRIES = ITERATE_ENTRIES;\n\n  src_Iterator__Iterator.prototype.inspect =\n  src_Iterator__Iterator.prototype.toSource = function () { return this.toString(); }\n  src_Iterator__Iterator.prototype[ITERATOR_SYMBOL] = function () {\n    return this;\n  };\n\n\n  function iteratorValue(type, k, v, iteratorResult) {\n    var value = type === 0 ? k : type === 1 ? v : [k, v];\n    iteratorResult ? (iteratorResult.value = value) : (iteratorResult = {\n      value: value, done: false\n    });\n    return iteratorResult;\n  }\n\n  function iteratorDone() {\n    return { value: undefined, done: true };\n  }\n\n  function hasIterator(maybeIterable) {\n    return !!getIteratorFn(maybeIterable);\n  }\n\n  function isIterator(maybeIterator) {\n    return maybeIterator && typeof maybeIterator.next === 'function';\n  }\n\n  function getIterator(iterable) {\n    var iteratorFn = getIteratorFn(iterable);\n    return iteratorFn && iteratorFn.call(iterable);\n  }\n\n  function getIteratorFn(iterable) {\n    var iteratorFn = iterable && (\n      (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||\n      iterable[FAUX_ITERATOR_SYMBOL]\n    );\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n\n  function isArrayLike(value) {\n    return value && typeof value.length === 'number';\n  }\n\n  createClass(Seq, Iterable);\n    function Seq(value) {\n      return value === null || value === undefined ? emptySequence() :\n        isIterable(value) ? value.toSeq() : seqFromValue(value);\n    }\n\n    Seq.of = function(/*...values*/) {\n      return Seq(arguments);\n    };\n\n    Seq.prototype.toSeq = function() {\n      return this;\n    };\n\n    Seq.prototype.toString = function() {\n      return this.__toString('Seq {', '}');\n    };\n\n    Seq.prototype.cacheResult = function() {\n      if (!this._cache && this.__iterateUncached) {\n        this._cache = this.entrySeq().toArray();\n        this.size = this._cache.length;\n      }\n      return this;\n    };\n\n    // abstract __iterateUncached(fn, reverse)\n\n    Seq.prototype.__iterate = function(fn, reverse) {\n      return seqIterate(this, fn, reverse, true);\n    };\n\n    // abstract __iteratorUncached(type, reverse)\n\n    Seq.prototype.__iterator = function(type, reverse) {\n      return seqIterator(this, type, reverse, true);\n    };\n\n\n\n  createClass(KeyedSeq, Seq);\n    function KeyedSeq(value) {\n      return value === null || value === undefined ?\n        emptySequence().toKeyedSeq() :\n        isIterable(value) ?\n          (isKeyed(value) ? value.toSeq() : value.fromEntrySeq()) :\n          keyedSeqFromValue(value);\n    }\n\n    KeyedSeq.prototype.toKeyedSeq = function() {\n      return this;\n    };\n\n\n\n  createClass(IndexedSeq, Seq);\n    function IndexedSeq(value) {\n      return value === null || value === undefined ? emptySequence() :\n        !isIterable(value) ? indexedSeqFromValue(value) :\n        isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();\n    }\n\n    IndexedSeq.of = function(/*...values*/) {\n      return IndexedSeq(arguments);\n    };\n\n    IndexedSeq.prototype.toIndexedSeq = function() {\n      return this;\n    };\n\n    IndexedSeq.prototype.toString = function() {\n      return this.__toString('Seq [', ']');\n    };\n\n    IndexedSeq.prototype.__iterate = function(fn, reverse) {\n      return seqIterate(this, fn, reverse, false);\n    };\n\n    IndexedSeq.prototype.__iterator = function(type, reverse) {\n      return seqIterator(this, type, reverse, false);\n    };\n\n\n\n  createClass(SetSeq, Seq);\n    function SetSeq(value) {\n      return (\n        value === null || value === undefined ? emptySequence() :\n        !isIterable(value) ? indexedSeqFromValue(value) :\n        isKeyed(value) ? value.entrySeq() : value\n      ).toSetSeq();\n    }\n\n    SetSeq.of = function(/*...values*/) {\n      return SetSeq(arguments);\n    };\n\n    SetSeq.prototype.toSetSeq = function() {\n      return this;\n    };\n\n\n\n  Seq.isSeq = isSeq;\n  Seq.Keyed = KeyedSeq;\n  Seq.Set = SetSeq;\n  Seq.Indexed = IndexedSeq;\n\n  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\n\n  Seq.prototype[IS_SEQ_SENTINEL] = true;\n\n\n\n  // #pragma Root Sequences\n\n  createClass(ArraySeq, IndexedSeq);\n    function ArraySeq(array) {\n      this._array = array;\n      this.size = array.length;\n    }\n\n    ArraySeq.prototype.get = function(index, notSetValue) {\n      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n    };\n\n    ArraySeq.prototype.__iterate = function(fn, reverse) {\n      var array = this._array;\n      var maxIndex = array.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    ArraySeq.prototype.__iterator = function(type, reverse) {\n      var array = this._array;\n      var maxIndex = array.length - 1;\n      var ii = 0;\n      return new src_Iterator__Iterator(function() \n        {return ii > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++])}\n      );\n    };\n\n\n\n  createClass(ObjectSeq, KeyedSeq);\n    function ObjectSeq(object) {\n      var keys = Object.keys(object);\n      this._object = object;\n      this._keys = keys;\n      this.size = keys.length;\n    }\n\n    ObjectSeq.prototype.get = function(key, notSetValue) {\n      if (notSetValue !== undefined && !this.has(key)) {\n        return notSetValue;\n      }\n      return this._object[key];\n    };\n\n    ObjectSeq.prototype.has = function(key) {\n      return this._object.hasOwnProperty(key);\n    };\n\n    ObjectSeq.prototype.__iterate = function(fn, reverse) {\n      var object = this._object;\n      var keys = this._keys;\n      var maxIndex = keys.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        var key = keys[reverse ? maxIndex - ii : ii];\n        if (fn(object[key], key, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    ObjectSeq.prototype.__iterator = function(type, reverse) {\n      var object = this._object;\n      var keys = this._keys;\n      var maxIndex = keys.length - 1;\n      var ii = 0;\n      return new src_Iterator__Iterator(function()  {\n        var key = keys[reverse ? maxIndex - ii : ii];\n        return ii++ > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, key, object[key]);\n      });\n    };\n\n  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n  createClass(IterableSeq, IndexedSeq);\n    function IterableSeq(iterable) {\n      this._iterable = iterable;\n      this.size = iterable.length || iterable.size;\n    }\n\n    IterableSeq.prototype.__iterateUncached = function(fn, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterable = this._iterable;\n      var iterator = getIterator(iterable);\n      var iterations = 0;\n      if (isIterator(iterator)) {\n        var step;\n        while (!(step = iterator.next()).done) {\n          if (fn(step.value, iterations++, this) === false) {\n            break;\n          }\n        }\n      }\n      return iterations;\n    };\n\n    IterableSeq.prototype.__iteratorUncached = function(type, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterable = this._iterable;\n      var iterator = getIterator(iterable);\n      if (!isIterator(iterator)) {\n        return new src_Iterator__Iterator(iteratorDone);\n      }\n      var iterations = 0;\n      return new src_Iterator__Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step : iteratorValue(type, iterations++, step.value);\n      });\n    };\n\n\n\n  createClass(IteratorSeq, IndexedSeq);\n    function IteratorSeq(iterator) {\n      this._iterator = iterator;\n      this._iteratorCache = [];\n    }\n\n    IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterator = this._iterator;\n      var cache = this._iteratorCache;\n      var iterations = 0;\n      while (iterations < cache.length) {\n        if (fn(cache[iterations], iterations++, this) === false) {\n          return iterations;\n        }\n      }\n      var step;\n      while (!(step = iterator.next()).done) {\n        var val = step.value;\n        cache[iterations] = val;\n        if (fn(val, iterations++, this) === false) {\n          break;\n        }\n      }\n      return iterations;\n    };\n\n    IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = this._iterator;\n      var cache = this._iteratorCache;\n      var iterations = 0;\n      return new src_Iterator__Iterator(function()  {\n        if (iterations >= cache.length) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          cache[iterations] = step.value;\n        }\n        return iteratorValue(type, iterations, cache[iterations++]);\n      });\n    };\n\n\n\n\n  // # pragma Helper functions\n\n  function isSeq(maybeSeq) {\n    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);\n  }\n\n  var EMPTY_SEQ;\n\n  function emptySequence() {\n    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n  }\n\n  function keyedSeqFromValue(value) {\n    var seq =\n      Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() :\n      isIterator(value) ? new IteratorSeq(value).fromEntrySeq() :\n      hasIterator(value) ? new IterableSeq(value).fromEntrySeq() :\n      typeof value === 'object' ? new ObjectSeq(value) :\n      undefined;\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of [k, v] entries, '+\n        'or keyed object: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function indexedSeqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value);\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of values: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function seqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value) ||\n      (typeof value === 'object' && new ObjectSeq(value));\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of values, or keyed object: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function maybeIndexedSeqFromValue(value) {\n    return (\n      isArrayLike(value) ? new ArraySeq(value) :\n      isIterator(value) ? new IteratorSeq(value) :\n      hasIterator(value) ? new IterableSeq(value) :\n      undefined\n    );\n  }\n\n  function seqIterate(seq, fn, reverse, useKeys) {\n    var cache = seq._cache;\n    if (cache) {\n      var maxIndex = cache.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        var entry = cache[reverse ? maxIndex - ii : ii];\n        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    }\n    return seq.__iterateUncached(fn, reverse);\n  }\n\n  function seqIterator(seq, type, reverse, useKeys) {\n    var cache = seq._cache;\n    if (cache) {\n      var maxIndex = cache.length - 1;\n      var ii = 0;\n      return new src_Iterator__Iterator(function()  {\n        var entry = cache[reverse ? maxIndex - ii : ii];\n        return ii++ > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);\n      });\n    }\n    return seq.__iteratorUncached(type, reverse);\n  }\n\n  createClass(Collection, Iterable);\n    function Collection() {\n      throw TypeError('Abstract');\n    }\n\n\n  createClass(KeyedCollection, Collection);function KeyedCollection() {}\n\n  createClass(IndexedCollection, Collection);function IndexedCollection() {}\n\n  createClass(SetCollection, Collection);function SetCollection() {}\n\n\n  Collection.Keyed = KeyedCollection;\n  Collection.Indexed = IndexedCollection;\n  Collection.Set = SetCollection;\n\n  /**\n   * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n   *\n   * NaN is considered the same as NaN, however -0 and 0 are considered the same\n   * value, which is different from the algorithm described by\n   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n   *\n   * This is extended further to allow Objects to describe the values they\n   * represent, by way of `valueOf` or `equals` (and `hashCode`).\n   *\n   * Note: because of this extension, the key equality of Immutable.Map and the\n   * value equality of Immutable.Set will differ from ES6 Map and Set.\n   *\n   * ### Defining custom values\n   *\n   * The easiest way to describe the value an object represents is by implementing\n   * `valueOf`. For example, `Date` represents a value by returning a unix\n   * timestamp for `valueOf`:\n   *\n   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n   *     var date2 = new Date(1234567890000);\n   *     date1.valueOf(); // 1234567890000\n   *     assert( date1 !== date2 );\n   *     assert( Immutable.is( date1, date2 ) );\n   *\n   * Note: overriding `valueOf` may have other implications if you use this object\n   * where JavaScript expects a primitive, such as implicit string coercion.\n   *\n   * For more complex types, especially collections, implementing `valueOf` may\n   * not be performant. An alternative is to implement `equals` and `hashCode`.\n   *\n   * `equals` takes another object, presumably of similar type, and returns true\n   * if the it is equal. Equality is symmetrical, so the same result should be\n   * returned if this and the argument are flipped.\n   *\n   *     assert( a.equals(b) === b.equals(a) );\n   *\n   * `hashCode` returns a 32bit integer number representing the object which will\n   * be used to determine how to store the value object in a Map or Set. You must\n   * provide both or neither methods, one must not exist without the other.\n   *\n   * Also, an important relationship between these methods must be upheld: if two\n   * values are equal, they *must* return the same hashCode. If the values are not\n   * equal, they might have the same hashCode; this is called a hash collision,\n   * and while undesirable for performance reasons, it is acceptable.\n   *\n   *     if (a.equals(b)) {\n   *       assert( a.hashCode() === b.hashCode() );\n   *     }\n   *\n   * All Immutable collections implement `equals` and `hashCode`.\n   *\n   */\n  function is(valueA, valueB) {\n    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n      return true;\n    }\n    if (!valueA || !valueB) {\n      return false;\n    }\n    if (typeof valueA.valueOf === 'function' &&\n        typeof valueB.valueOf === 'function') {\n      valueA = valueA.valueOf();\n      valueB = valueB.valueOf();\n    }\n    return typeof valueA.equals === 'function' &&\n      typeof valueB.equals === 'function' ?\n        valueA.equals(valueB) :\n        valueA === valueB || (valueA !== valueA && valueB !== valueB);\n  }\n\n  function fromJS(json, converter) {\n    return converter ?\n      fromJSWith(converter, json, '', {'': json}) :\n      fromJSDefault(json);\n  }\n\n  function fromJSWith(converter, json, key, parentJSON) {\n    if (Array.isArray(json)) {\n      return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n    }\n    if (isPlainObj(json)) {\n      return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n    }\n    return json;\n  }\n\n  function fromJSDefault(json) {\n    if (Array.isArray(json)) {\n      return IndexedSeq(json).map(fromJSDefault).toList();\n    }\n    if (isPlainObj(json)) {\n      return KeyedSeq(json).map(fromJSDefault).toMap();\n    }\n    return json;\n  }\n\n  function isPlainObj(value) {\n    return value && (value.constructor === Object || value.constructor === undefined);\n  }\n\n  var src_Math__imul =\n    typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ?\n    Math.imul :\n    function src_Math__imul(a, b) {\n      a = a | 0; // int\n      b = b | 0; // int\n      var c = a & 0xffff;\n      var d = b & 0xffff;\n      // Shift by 0 fixes the sign on the high part.\n      return (c * d) + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0) | 0; // int\n    };\n\n  // v8 has an optimization for storing 31-bit signed numbers.\n  // Values which have either 00 or 11 as the high order bits qualify.\n  // This function drops the highest order bit in a signed number, maintaining\n  // the sign bit.\n  function smi(i32) {\n    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xBFFFFFFF);\n  }\n\n  function hash(o) {\n    if (o === false || o === null || o === undefined) {\n      return 0;\n    }\n    if (typeof o.valueOf === 'function') {\n      o = o.valueOf();\n      if (o === false || o === null || o === undefined) {\n        return 0;\n      }\n    }\n    if (o === true) {\n      return 1;\n    }\n    var type = typeof o;\n    if (type === 'number') {\n      var h = o | 0;\n      if (h !== o) {\n        h ^= o * 0xFFFFFFFF;\n      }\n      while (o > 0xFFFFFFFF) {\n        o /= 0xFFFFFFFF;\n        h ^= o;\n      }\n      return smi(h);\n    }\n    if (type === 'string') {\n      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);\n    }\n    if (typeof o.hashCode === 'function') {\n      return o.hashCode();\n    }\n    return hashJSObj(o);\n  }\n\n  function cachedHashString(string) {\n    var hash = stringHashCache[string];\n    if (hash === undefined) {\n      hash = hashString(string);\n      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n        STRING_HASH_CACHE_SIZE = 0;\n        stringHashCache = {};\n      }\n      STRING_HASH_CACHE_SIZE++;\n      stringHashCache[string] = hash;\n    }\n    return hash;\n  }\n\n  // http://jsperf.com/hashing-strings\n  function hashString(string) {\n    // This is the hash from JVM\n    // The hash code for a string is computed as\n    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n    // where s[i] is the ith character of the string and n is the length of\n    // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n    // (exclusive) by dropping high bits.\n    var hash = 0;\n    for (var ii = 0; ii < string.length; ii++) {\n      hash = 31 * hash + string.charCodeAt(ii) | 0;\n    }\n    return smi(hash);\n  }\n\n  function hashJSObj(obj) {\n    var hash = weakMap && weakMap.get(obj);\n    if (hash) return hash;\n\n    hash = obj[UID_HASH_KEY];\n    if (hash) return hash;\n\n    if (!canDefineProperty) {\n      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n      if (hash) return hash;\n\n      hash = getIENodeHash(obj);\n      if (hash) return hash;\n    }\n\n    if (Object.isExtensible && !Object.isExtensible(obj)) {\n      throw new Error('Non-extensible objects are not allowed as keys.');\n    }\n\n    hash = ++objHashUID;\n    if (objHashUID & 0x40000000) {\n      objHashUID = 0;\n    }\n\n    if (weakMap) {\n      weakMap.set(obj, hash);\n    } else if (canDefineProperty) {\n      Object.defineProperty(obj, UID_HASH_KEY, {\n        'enumerable': false,\n        'configurable': false,\n        'writable': false,\n        'value': hash\n      });\n    } else if (obj.propertyIsEnumerable &&\n               obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {\n      // Since we can't define a non-enumerable property on the object\n      // we'll hijack one of the less-used non-enumerable properties to\n      // save our hash on it. Since this is a function it will not show up in\n      // `JSON.stringify` which is what we want.\n      obj.propertyIsEnumerable = function() {\n        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);\n      };\n      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;\n    } else if (obj.nodeType) {\n      // At this point we couldn't get the IE `uniqueID` to use as a hash\n      // and we couldn't use a non-enumerable property to exploit the\n      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n      // itself.\n      obj[UID_HASH_KEY] = hash;\n    } else {\n      throw new Error('Unable to set a non-enumerable property on object.');\n    }\n\n    return hash;\n  }\n\n  // True if Object.defineProperty works as expected. IE8 fails this test.\n  var canDefineProperty = (function() {\n    try {\n      Object.defineProperty({}, '@', {});\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }());\n\n  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n  // and avoid memory leaks from the IE cloneNode bug.\n  function getIENodeHash(node) {\n    if (node && node.nodeType > 0) {\n      switch (node.nodeType) {\n        case 1: // Element\n          return node.uniqueID;\n        case 9: // Document\n          return node.documentElement && node.documentElement.uniqueID;\n      }\n    }\n  }\n\n  // If possible, use a WeakMap.\n  var weakMap = typeof WeakMap === 'function' && new WeakMap();\n\n  var objHashUID = 0;\n\n  var UID_HASH_KEY = '__immutablehash__';\n  if (typeof Symbol === 'function') {\n    UID_HASH_KEY = Symbol(UID_HASH_KEY);\n  }\n\n  var STRING_HASH_CACHE_MIN_STRLEN = 16;\n  var STRING_HASH_CACHE_MAX_SIZE = 255;\n  var STRING_HASH_CACHE_SIZE = 0;\n  var stringHashCache = {};\n\n  function invariant(condition, error) {\n    if (!condition) throw new Error(error);\n  }\n\n  function assertNotInfinite(size) {\n    invariant(\n      size !== Infinity,\n      'Cannot perform this action with an infinite size.'\n    );\n  }\n\n  createClass(ToKeyedSequence, KeyedSeq);\n    function ToKeyedSequence(indexed, useKeys) {\n      this._iter = indexed;\n      this._useKeys = useKeys;\n      this.size = indexed.size;\n    }\n\n    ToKeyedSequence.prototype.get = function(key, notSetValue) {\n      return this._iter.get(key, notSetValue);\n    };\n\n    ToKeyedSequence.prototype.has = function(key) {\n      return this._iter.has(key);\n    };\n\n    ToKeyedSequence.prototype.valueSeq = function() {\n      return this._iter.valueSeq();\n    };\n\n    ToKeyedSequence.prototype.reverse = function() {var this$0 = this;\n      var reversedSequence = reverseFactory(this, true);\n      if (!this._useKeys) {\n        reversedSequence.valueSeq = function()  {return this$0._iter.toSeq().reverse()};\n      }\n      return reversedSequence;\n    };\n\n    ToKeyedSequence.prototype.map = function(mapper, context) {var this$0 = this;\n      var mappedSequence = mapFactory(this, mapper, context);\n      if (!this._useKeys) {\n        mappedSequence.valueSeq = function()  {return this$0._iter.toSeq().map(mapper, context)};\n      }\n      return mappedSequence;\n    };\n\n    ToKeyedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var ii;\n      return this._iter.__iterate(\n        this._useKeys ?\n          function(v, k)  {return fn(v, k, this$0)} :\n          ((ii = reverse ? resolveSize(this) : 0),\n            function(v ) {return fn(v, reverse ? --ii : ii++, this$0)}),\n        reverse\n      );\n    };\n\n    ToKeyedSequence.prototype.__iterator = function(type, reverse) {\n      if (this._useKeys) {\n        return this._iter.__iterator(type, reverse);\n      }\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      var ii = reverse ? resolveSize(this) : 0;\n      return new src_Iterator__Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, reverse ? --ii : ii++, step.value, step);\n      });\n    };\n\n  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n  createClass(ToIndexedSequence, IndexedSeq);\n    function ToIndexedSequence(iter) {\n      this._iter = iter;\n      this.size = iter.size;\n    }\n\n    ToIndexedSequence.prototype.contains = function(value) {\n      return this._iter.contains(value);\n    };\n\n    ToIndexedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      return this._iter.__iterate(function(v ) {return fn(v, iterations++, this$0)}, reverse);\n    };\n\n    ToIndexedSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      var iterations = 0;\n      return new src_Iterator__Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, iterations++, step.value, step)\n      });\n    };\n\n\n\n  createClass(ToSetSequence, SetSeq);\n    function ToSetSequence(iter) {\n      this._iter = iter;\n      this.size = iter.size;\n    }\n\n    ToSetSequence.prototype.has = function(key) {\n      return this._iter.contains(key);\n    };\n\n    ToSetSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._iter.__iterate(function(v ) {return fn(v, v, this$0)}, reverse);\n    };\n\n    ToSetSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      return new src_Iterator__Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, step.value, step.value, step);\n      });\n    };\n\n\n\n  createClass(FromEntriesSequence, KeyedSeq);\n    function FromEntriesSequence(entries) {\n      this._iter = entries;\n      this.size = entries.size;\n    }\n\n    FromEntriesSequence.prototype.entrySeq = function() {\n      return this._iter.toSeq();\n    };\n\n    FromEntriesSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._iter.__iterate(function(entry ) {\n        // Check if entry exists first so array access doesn't throw for holes\n        // in the parent iteration.\n        if (entry) {\n          validateEntry(entry);\n          return fn(entry[1], entry[0], this$0);\n        }\n      }, reverse);\n    };\n\n    FromEntriesSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      return new src_Iterator__Iterator(function()  {\n        while (true) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          var entry = step.value;\n          // Check if entry exists first so array access doesn't throw for holes\n          // in the parent iteration.\n          if (entry) {\n            validateEntry(entry);\n            return type === ITERATE_ENTRIES ? step :\n              iteratorValue(type, entry[0], entry[1], step);\n          }\n        }\n      });\n    };\n\n\n  ToIndexedSequence.prototype.cacheResult =\n  ToKeyedSequence.prototype.cacheResult =\n  ToSetSequence.prototype.cacheResult =\n  FromEntriesSequence.prototype.cacheResult =\n    cacheResultThrough;\n\n\n  function flipFactory(iterable) {\n    var flipSequence = makeSequence(iterable);\n    flipSequence._iter = iterable;\n    flipSequence.size = iterable.size;\n    flipSequence.flip = function()  {return iterable};\n    flipSequence.reverse = function () {\n      var reversedSequence = iterable.reverse.apply(this); // super.reverse()\n      reversedSequence.flip = function()  {return iterable.reverse()};\n      return reversedSequence;\n    };\n    flipSequence.has = function(key ) {return iterable.contains(key)};\n    flipSequence.contains = function(key ) {return iterable.has(key)};\n    flipSequence.cacheResult = cacheResultThrough;\n    flipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(function(v, k)  {return fn(k, v, this$0) !== false}, reverse);\n    }\n    flipSequence.__iteratorUncached = function(type, reverse) {\n      if (type === ITERATE_ENTRIES) {\n        var iterator = iterable.__iterator(type, reverse);\n        return new src_Iterator__Iterator(function()  {\n          var step = iterator.next();\n          if (!step.done) {\n            var k = step.value[0];\n            step.value[0] = step.value[1];\n            step.value[1] = k;\n          }\n          return step;\n        });\n      }\n      return iterable.__iterator(\n        type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,\n        reverse\n      );\n    }\n    return flipSequence;\n  }\n\n\n  function mapFactory(iterable, mapper, context) {\n    var mappedSequence = makeSequence(iterable);\n    mappedSequence.size = iterable.size;\n    mappedSequence.has = function(key ) {return iterable.has(key)};\n    mappedSequence.get = function(key, notSetValue)  {\n      var v = iterable.get(key, NOT_SET);\n      return v === NOT_SET ?\n        notSetValue :\n        mapper.call(context, v, key, iterable);\n    };\n    mappedSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(\n        function(v, k, c)  {return fn(mapper.call(context, v, k, c), k, this$0) !== false},\n        reverse\n      );\n    }\n    mappedSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      return new src_Iterator__Iterator(function()  {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var key = entry[0];\n        return iteratorValue(\n          type,\n          key,\n          mapper.call(context, entry[1], key, iterable),\n          step\n        );\n      });\n    }\n    return mappedSequence;\n  }\n\n\n  function reverseFactory(iterable, useKeys) {\n    var reversedSequence = makeSequence(iterable);\n    reversedSequence._iter = iterable;\n    reversedSequence.size = iterable.size;\n    reversedSequence.reverse = function()  {return iterable};\n    if (iterable.flip) {\n      reversedSequence.flip = function () {\n        var flipSequence = flipFactory(iterable);\n        flipSequence.reverse = function()  {return iterable.flip()};\n        return flipSequence;\n      };\n    }\n    reversedSequence.get = function(key, notSetValue) \n      {return iterable.get(useKeys ? key : -1 - key, notSetValue)};\n    reversedSequence.has = function(key )\n      {return iterable.has(useKeys ? key : -1 - key)};\n    reversedSequence.contains = function(value ) {return iterable.contains(value)};\n    reversedSequence.cacheResult = cacheResultThrough;\n    reversedSequence.__iterate = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(function(v, k)  {return fn(v, k, this$0)}, !reverse);\n    };\n    reversedSequence.__iterator =\n      function(type, reverse)  {return iterable.__iterator(type, !reverse)};\n    return reversedSequence;\n  }\n\n\n  function filterFactory(iterable, predicate, context, useKeys) {\n    var filterSequence = makeSequence(iterable);\n    if (useKeys) {\n      filterSequence.has = function(key ) {\n        var v = iterable.get(key, NOT_SET);\n        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);\n      };\n      filterSequence.get = function(key, notSetValue)  {\n        var v = iterable.get(key, NOT_SET);\n        return v !== NOT_SET && predicate.call(context, v, key, iterable) ?\n          v : notSetValue;\n      };\n    }\n    filterSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c)  {\n        if (predicate.call(context, v, k, c)) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0);\n        }\n      }, reverse);\n      return iterations;\n    };\n    filterSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var iterations = 0;\n      return new src_Iterator__Iterator(function()  {\n        while (true) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          var entry = step.value;\n          var key = entry[0];\n          var value = entry[1];\n          if (predicate.call(context, value, key, iterable)) {\n            return iteratorValue(type, useKeys ? key : iterations++, value, step);\n          }\n        }\n      });\n    }\n    return filterSequence;\n  }\n\n\n  function countByFactory(iterable, grouper, context) {\n    var groups = src_Map__Map().asMutable();\n    iterable.__iterate(function(v, k)  {\n      groups.update(\n        grouper.call(context, v, k, iterable),\n        0,\n        function(a ) {return a + 1}\n      );\n    });\n    return groups.asImmutable();\n  }\n\n\n  function groupByFactory(iterable, grouper, context) {\n    var isKeyedIter = isKeyed(iterable);\n    var groups = (isOrdered(iterable) ? OrderedMap() : src_Map__Map()).asMutable();\n    iterable.__iterate(function(v, k)  {\n      groups.update(\n        grouper.call(context, v, k, iterable),\n        function(a ) {return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a)}\n      );\n    });\n    var coerce = iterableClass(iterable);\n    return groups.map(function(arr ) {return reify(iterable, coerce(arr))});\n  }\n\n\n  function sliceFactory(iterable, begin, end, useKeys) {\n    var originalSize = iterable.size;\n\n    if (wholeSlice(begin, end, originalSize)) {\n      return iterable;\n    }\n\n    var resolvedBegin = resolveBegin(begin, originalSize);\n    var resolvedEnd = resolveEnd(end, originalSize);\n\n    // begin or end will be NaN if they were provided as negative numbers and\n    // this iterable's size is unknown. In that case, cache first so there is\n    // a known size.\n    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {\n      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);\n    }\n\n    var sliceSize = resolvedEnd - resolvedBegin;\n    if (sliceSize < 0) {\n      sliceSize = 0;\n    }\n\n    var sliceSeq = makeSequence(iterable);\n\n    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;\n\n    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {\n      sliceSeq.get = function (index, notSetValue) {\n        index = wrapIndex(this, index);\n        return index >= 0 && index < sliceSize ?\n          iterable.get(index + resolvedBegin, notSetValue) :\n          notSetValue;\n      }\n    }\n\n    sliceSeq.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      if (sliceSize === 0) {\n        return 0;\n      }\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var skipped = 0;\n      var isSkipping = true;\n      var iterations = 0;\n      iterable.__iterate(function(v, k)  {\n        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0) !== false &&\n                 iterations !== sliceSize;\n        }\n      });\n      return iterations;\n    };\n\n    sliceSeq.__iteratorUncached = function(type, reverse) {\n      if (sliceSize && reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      // Don't bother instantiating parent iterator if taking 0.\n      var iterator = sliceSize && iterable.__iterator(type, reverse);\n      var skipped = 0;\n      var iterations = 0;\n      return new src_Iterator__Iterator(function()  {\n        while (skipped++ !== resolvedBegin) {\n          iterator.next();\n        }\n        if (++iterations > sliceSize) {\n          return iteratorDone();\n        }\n        var step = iterator.next();\n        if (useKeys || type === ITERATE_VALUES) {\n          return step;\n        } else if (type === ITERATE_KEYS) {\n          return iteratorValue(type, iterations - 1, undefined, step);\n        } else {\n          return iteratorValue(type, iterations - 1, step.value[1], step);\n        }\n      });\n    }\n\n    return sliceSeq;\n  }\n\n\n  function takeWhileFactory(iterable, predicate, context) {\n    var takeSequence = makeSequence(iterable);\n    takeSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c) \n        {return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0)}\n      );\n      return iterations;\n    };\n    takeSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var iterating = true;\n      return new src_Iterator__Iterator(function()  {\n        if (!iterating) {\n          return iteratorDone();\n        }\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var k = entry[0];\n        var v = entry[1];\n        if (!predicate.call(context, v, k, this$0)) {\n          iterating = false;\n          return iteratorDone();\n        }\n        return type === ITERATE_ENTRIES ? step :\n          iteratorValue(type, k, v, step);\n      });\n    };\n    return takeSequence;\n  }\n\n\n  function skipWhileFactory(iterable, predicate, context, useKeys) {\n    var skipSequence = makeSequence(iterable);\n    skipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var isSkipping = true;\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c)  {\n        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0);\n        }\n      });\n      return iterations;\n    };\n    skipSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var skipping = true;\n      var iterations = 0;\n      return new src_Iterator__Iterator(function()  {\n        var step, k, v;\n        do {\n          step = iterator.next();\n          if (step.done) {\n            if (useKeys || type === ITERATE_VALUES) {\n              return step;\n            } else if (type === ITERATE_KEYS) {\n              return iteratorValue(type, iterations++, undefined, step);\n            } else {\n              return iteratorValue(type, iterations++, step.value[1], step);\n            }\n          }\n          var entry = step.value;\n          k = entry[0];\n          v = entry[1];\n          skipping && (skipping = predicate.call(context, v, k, this$0));\n        } while (skipping);\n        return type === ITERATE_ENTRIES ? step :\n          iteratorValue(type, k, v, step);\n      });\n    };\n    return skipSequence;\n  }\n\n\n  function concatFactory(iterable, values) {\n    var isKeyedIterable = isKeyed(iterable);\n    var iters = [iterable].concat(values).map(function(v ) {\n      if (!isIterable(v)) {\n        v = isKeyedIterable ?\n          keyedSeqFromValue(v) :\n          indexedSeqFromValue(Array.isArray(v) ? v : [v]);\n      } else if (isKeyedIterable) {\n        v = KeyedIterable(v);\n      }\n      return v;\n    }).filter(function(v ) {return v.size !== 0});\n\n    if (iters.length === 0) {\n      return iterable;\n    }\n\n    if (iters.length === 1) {\n      var singleton = iters[0];\n      if (singleton === iterable ||\n          isKeyedIterable && isKeyed(singleton) ||\n          isIndexed(iterable) && isIndexed(singleton)) {\n        return singleton;\n      }\n    }\n\n    var concatSeq = new ArraySeq(iters);\n    if (isKeyedIterable) {\n      concatSeq = concatSeq.toKeyedSeq();\n    } else if (!isIndexed(iterable)) {\n      concatSeq = concatSeq.toSetSeq();\n    }\n    concatSeq = concatSeq.flatten(true);\n    concatSeq.size = iters.reduce(\n      function(sum, seq)  {\n        if (sum !== undefined) {\n          var size = seq.size;\n          if (size !== undefined) {\n            return sum + size;\n          }\n        }\n      },\n      0\n    );\n    return concatSeq;\n  }\n\n\n  function flattenFactory(iterable, depth, useKeys) {\n    var flatSequence = makeSequence(iterable);\n    flatSequence.__iterateUncached = function(fn, reverse) {\n      var iterations = 0;\n      var stopped = false;\n      function flatDeep(iter, currentDepth) {var this$0 = this;\n        iter.__iterate(function(v, k)  {\n          if ((!depth || currentDepth < depth) && isIterable(v)) {\n            flatDeep(v, currentDepth + 1);\n          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {\n            stopped = true;\n          }\n          return !stopped;\n        }, reverse);\n      }\n      flatDeep(iterable, 0);\n      return iterations;\n    }\n    flatSequence.__iteratorUncached = function(type, reverse) {\n      var iterator = iterable.__iterator(type, reverse);\n      var stack = [];\n      var iterations = 0;\n      return new src_Iterator__Iterator(function()  {\n        while (iterator) {\n          var step = iterator.next();\n          if (step.done !== false) {\n            iterator = stack.pop();\n            continue;\n          }\n          var v = step.value;\n          if (type === ITERATE_ENTRIES) {\n            v = v[1];\n          }\n          if ((!depth || stack.length < depth) && isIterable(v)) {\n            stack.push(iterator);\n            iterator = v.__iterator(type, reverse);\n          } else {\n            return useKeys ? step : iteratorValue(type, iterations++, v, step);\n          }\n        }\n        return iteratorDone();\n      });\n    }\n    return flatSequence;\n  }\n\n\n  function flatMapFactory(iterable, mapper, context) {\n    var coerce = iterableClass(iterable);\n    return iterable.toSeq().map(\n      function(v, k)  {return coerce(mapper.call(context, v, k, iterable))}\n    ).flatten(true);\n  }\n\n\n  function interposeFactory(iterable, separator) {\n    var interposedSequence = makeSequence(iterable);\n    interposedSequence.size = iterable.size && iterable.size * 2 -1;\n    interposedSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      iterable.__iterate(function(v, k) \n        {return (!iterations || fn(separator, iterations++, this$0) !== false) &&\n        fn(v, iterations++, this$0) !== false},\n        reverse\n      );\n      return iterations;\n    };\n    interposedSequence.__iteratorUncached = function(type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);\n      var iterations = 0;\n      var step;\n      return new src_Iterator__Iterator(function()  {\n        if (!step || iterations % 2) {\n          step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n        }\n        return iterations % 2 ?\n          iteratorValue(type, iterations++, separator) :\n          iteratorValue(type, iterations++, step.value, step);\n      });\n    };\n    return interposedSequence;\n  }\n\n\n  function sortFactory(iterable, comparator, mapper) {\n    if (!comparator) {\n      comparator = defaultComparator;\n    }\n    var isKeyedIterable = isKeyed(iterable);\n    var index = 0;\n    var entries = iterable.toSeq().map(\n      function(v, k)  {return [k, v, index++, mapper ? mapper(v, k, iterable) : v]}\n    ).toArray();\n    entries.sort(function(a, b)  {return comparator(a[3], b[3]) || a[2] - b[2]}).forEach(\n      isKeyedIterable ?\n      function(v, i)  { entries[i].length = 2; } :\n      function(v, i)  { entries[i] = v[1]; }\n    );\n    return isKeyedIterable ? KeyedSeq(entries) :\n      isIndexed(iterable) ? IndexedSeq(entries) :\n      SetSeq(entries);\n  }\n\n\n  function maxFactory(iterable, comparator, mapper) {\n    if (!comparator) {\n      comparator = defaultComparator;\n    }\n    if (mapper) {\n      var entry = iterable.toSeq()\n        .map(function(v, k)  {return [v, mapper(v, k, iterable)]})\n        .reduce(function(a, b)  {return maxCompare(comparator, a[1], b[1]) ? b : a});\n      return entry && entry[0];\n    } else {\n      return iterable.reduce(function(a, b)  {return maxCompare(comparator, a, b) ? b : a});\n    }\n  }\n\n  function maxCompare(comparator, a, b) {\n    var comp = comparator(b, a);\n    // b is considered the new max if the comparator declares them equal, but\n    // they are not equal and b is in fact a nullish value.\n    return (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0;\n  }\n\n\n  function zipWithFactory(keyIter, zipper, iters) {\n    var zipSequence = makeSequence(keyIter);\n    zipSequence.size = new ArraySeq(iters).map(function(i ) {return i.size}).min();\n    // Note: this a generic base implementation of __iterate in terms of\n    // __iterator which may be more generically useful in the future.\n    zipSequence.__iterate = function(fn, reverse) {\n      /* generic:\n      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        iterations++;\n        if (fn(step.value[1], step.value[0], this) === false) {\n          break;\n        }\n      }\n      return iterations;\n      */\n      // indexed:\n      var iterator = this.__iterator(ITERATE_VALUES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        if (fn(step.value, iterations++, this) === false) {\n          break;\n        }\n      }\n      return iterations;\n    };\n    zipSequence.__iteratorUncached = function(type, reverse) {\n      var iterators = iters.map(function(i )\n        {return (i = Iterable(i), getIterator(reverse ? i.reverse() : i))}\n      );\n      var iterations = 0;\n      var isDone = false;\n      return new src_Iterator__Iterator(function()  {\n        var steps;\n        if (!isDone) {\n          steps = iterators.map(function(i ) {return i.next()});\n          isDone = steps.some(function(s ) {return s.done});\n        }\n        if (isDone) {\n          return iteratorDone();\n        }\n        return iteratorValue(\n          type,\n          iterations++,\n          zipper.apply(null, steps.map(function(s ) {return s.value}))\n        );\n      });\n    };\n    return zipSequence\n  }\n\n\n  // #pragma Helper Functions\n\n  function reify(iter, seq) {\n    return isSeq(iter) ? seq : iter.constructor(seq);\n  }\n\n  function validateEntry(entry) {\n    if (entry !== Object(entry)) {\n      throw new TypeError('Expected [K, V] tuple: ' + entry);\n    }\n  }\n\n  function resolveSize(iter) {\n    assertNotInfinite(iter.size);\n    return ensureSize(iter);\n  }\n\n  function iterableClass(iterable) {\n    return isKeyed(iterable) ? KeyedIterable :\n      isIndexed(iterable) ? IndexedIterable :\n      SetIterable;\n  }\n\n  function makeSequence(iterable) {\n    return Object.create(\n      (\n        isKeyed(iterable) ? KeyedSeq :\n        isIndexed(iterable) ? IndexedSeq :\n        SetSeq\n      ).prototype\n    );\n  }\n\n  function cacheResultThrough() {\n    if (this._iter.cacheResult) {\n      this._iter.cacheResult();\n      this.size = this._iter.size;\n      return this;\n    } else {\n      return Seq.prototype.cacheResult.call(this);\n    }\n  }\n\n  function defaultComparator(a, b) {\n    return a > b ? 1 : a < b ? -1 : 0;\n  }\n\n  function forceIterator(keyPath) {\n    var iter = getIterator(keyPath);\n    if (!iter) {\n      // Array might not be iterable in this environment, so we need a fallback\n      // to our wrapped type.\n      if (!isArrayLike(keyPath)) {\n        throw new TypeError('Expected iterable or array-like: ' + keyPath);\n      }\n      iter = getIterator(Iterable(keyPath));\n    }\n    return iter;\n  }\n\n  createClass(src_Map__Map, KeyedCollection);\n\n    // @pragma Construction\n\n    function src_Map__Map(value) {\n      return value === null || value === undefined ? emptyMap() :\n        isMap(value) ? value :\n        emptyMap().withMutations(function(map ) {\n          var iter = KeyedIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v, k)  {return map.set(k, v)});\n        });\n    }\n\n    src_Map__Map.prototype.toString = function() {\n      return this.__toString('Map {', '}');\n    };\n\n    // @pragma Access\n\n    src_Map__Map.prototype.get = function(k, notSetValue) {\n      return this._root ?\n        this._root.get(0, undefined, k, notSetValue) :\n        notSetValue;\n    };\n\n    // @pragma Modification\n\n    src_Map__Map.prototype.set = function(k, v) {\n      return updateMap(this, k, v);\n    };\n\n    src_Map__Map.prototype.setIn = function(keyPath, v) {\n      return this.updateIn(keyPath, NOT_SET, function()  {return v});\n    };\n\n    src_Map__Map.prototype.remove = function(k) {\n      return updateMap(this, k, NOT_SET);\n    };\n\n    src_Map__Map.prototype.deleteIn = function(keyPath) {\n      return this.updateIn(keyPath, function()  {return NOT_SET});\n    };\n\n    src_Map__Map.prototype.update = function(k, notSetValue, updater) {\n      return arguments.length === 1 ?\n        k(this) :\n        this.updateIn([k], notSetValue, updater);\n    };\n\n    src_Map__Map.prototype.updateIn = function(keyPath, notSetValue, updater) {\n      if (!updater) {\n        updater = notSetValue;\n        notSetValue = undefined;\n      }\n      var updatedValue = updateInDeepMap(\n        this,\n        forceIterator(keyPath),\n        notSetValue,\n        updater\n      );\n      return updatedValue === NOT_SET ? undefined : updatedValue;\n    };\n\n    src_Map__Map.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._root = null;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyMap();\n    };\n\n    // @pragma Composition\n\n    src_Map__Map.prototype.merge = function(/*...iters*/) {\n      return mergeIntoMapWith(this, undefined, arguments);\n    };\n\n    src_Map__Map.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoMapWith(this, merger, iters);\n    };\n\n    src_Map__Map.prototype.mergeIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n      return this.updateIn(keyPath, emptyMap(), function(m ) {return m.merge.apply(m, iters)});\n    };\n\n    src_Map__Map.prototype.mergeDeep = function(/*...iters*/) {\n      return mergeIntoMapWith(this, deepMerger(undefined), arguments);\n    };\n\n    src_Map__Map.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoMapWith(this, deepMerger(merger), iters);\n    };\n\n    src_Map__Map.prototype.mergeDeepIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n      return this.updateIn(keyPath, emptyMap(), function(m ) {return m.mergeDeep.apply(m, iters)});\n    };\n\n    src_Map__Map.prototype.sort = function(comparator) {\n      // Late binding\n      return OrderedMap(sortFactory(this, comparator));\n    };\n\n    src_Map__Map.prototype.sortBy = function(mapper, comparator) {\n      // Late binding\n      return OrderedMap(sortFactory(this, comparator, mapper));\n    };\n\n    // @pragma Mutability\n\n    src_Map__Map.prototype.withMutations = function(fn) {\n      var mutable = this.asMutable();\n      fn(mutable);\n      return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n    };\n\n    src_Map__Map.prototype.asMutable = function() {\n      return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n    };\n\n    src_Map__Map.prototype.asImmutable = function() {\n      return this.__ensureOwner();\n    };\n\n    src_Map__Map.prototype.wasAltered = function() {\n      return this.__altered;\n    };\n\n    src_Map__Map.prototype.__iterator = function(type, reverse) {\n      return new MapIterator(this, type, reverse);\n    };\n\n    src_Map__Map.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      this._root && this._root.iterate(function(entry ) {\n        iterations++;\n        return fn(entry[1], entry[0], this$0);\n      }, reverse);\n      return iterations;\n    };\n\n    src_Map__Map.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        return this;\n      }\n      return makeMap(this.size, this._root, ownerID, this.__hash);\n    };\n\n\n  function isMap(maybeMap) {\n    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);\n  }\n\n  src_Map__Map.isMap = isMap;\n\n  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\n\n  var MapPrototype = src_Map__Map.prototype;\n  MapPrototype[IS_MAP_SENTINEL] = true;\n  MapPrototype[DELETE] = MapPrototype.remove;\n  MapPrototype.removeIn = MapPrototype.deleteIn;\n\n\n  // #pragma Trie Nodes\n\n\n\n    function ArrayMapNode(ownerID, entries) {\n      this.ownerID = ownerID;\n      this.entries = entries;\n    }\n\n    ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      var entries = this.entries;\n      for (var ii = 0, len = entries.length; ii < len; ii++) {\n        if (is(key, entries[ii][0])) {\n          return entries[ii][1];\n        }\n      }\n      return notSetValue;\n    };\n\n    ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      var removed = value === NOT_SET;\n\n      var entries = this.entries;\n      var idx = 0;\n      for (var len = entries.length; idx < len; idx++) {\n        if (is(key, entries[idx][0])) {\n          break;\n        }\n      }\n      var exists = idx < len;\n\n      if (exists ? entries[idx][1] === value : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n      (removed || !exists) && SetRef(didChangeSize);\n\n      if (removed && entries.length === 1) {\n        return; // undefined\n      }\n\n      if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n        return createNodes(ownerID, entries, key, value);\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newEntries = isEditable ? entries : arrCopy(entries);\n\n      if (exists) {\n        if (removed) {\n          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n        } else {\n          newEntries[idx] = [key, value];\n        }\n      } else {\n        newEntries.push([key, value]);\n      }\n\n      if (isEditable) {\n        this.entries = newEntries;\n        return this;\n      }\n\n      return new ArrayMapNode(ownerID, newEntries);\n    };\n\n\n\n\n    function BitmapIndexedNode(ownerID, bitmap, nodes) {\n      this.ownerID = ownerID;\n      this.bitmap = bitmap;\n      this.nodes = nodes;\n    }\n\n    BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var bit = (1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK));\n      var bitmap = this.bitmap;\n      return (bitmap & bit) === 0 ? notSetValue :\n        this.nodes[popCount(bitmap & (bit - 1))].get(shift + SHIFT, keyHash, key, notSetValue);\n    };\n\n    BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var bit = 1 << keyHashFrag;\n      var bitmap = this.bitmap;\n      var exists = (bitmap & bit) !== 0;\n\n      if (!exists && value === NOT_SET) {\n        return this;\n      }\n\n      var idx = popCount(bitmap & (bit - 1));\n      var nodes = this.nodes;\n      var node = exists ? nodes[idx] : undefined;\n      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n\n      if (newNode === node) {\n        return this;\n      }\n\n      if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n        return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n      }\n\n      if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {\n        return nodes[idx ^ 1];\n      }\n\n      if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n        return newNode;\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;\n      var newNodes = exists ? newNode ?\n        setIn(nodes, idx, newNode, isEditable) :\n        spliceOut(nodes, idx, isEditable) :\n        spliceIn(nodes, idx, newNode, isEditable);\n\n      if (isEditable) {\n        this.bitmap = newBitmap;\n        this.nodes = newNodes;\n        return this;\n      }\n\n      return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n    };\n\n\n\n\n    function HashArrayMapNode(ownerID, count, nodes) {\n      this.ownerID = ownerID;\n      this.count = count;\n      this.nodes = nodes;\n    }\n\n    HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var node = this.nodes[idx];\n      return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;\n    };\n\n    HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var removed = value === NOT_SET;\n      var nodes = this.nodes;\n      var node = nodes[idx];\n\n      if (removed && !node) {\n        return this;\n      }\n\n      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n      if (newNode === node) {\n        return this;\n      }\n\n      var newCount = this.count;\n      if (!node) {\n        newCount++;\n      } else if (!newNode) {\n        newCount--;\n        if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n          return packNodes(ownerID, nodes, newCount, idx);\n        }\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newNodes = setIn(nodes, idx, newNode, isEditable);\n\n      if (isEditable) {\n        this.count = newCount;\n        this.nodes = newNodes;\n        return this;\n      }\n\n      return new HashArrayMapNode(ownerID, newCount, newNodes);\n    };\n\n\n\n\n    function HashCollisionNode(ownerID, keyHash, entries) {\n      this.ownerID = ownerID;\n      this.keyHash = keyHash;\n      this.entries = entries;\n    }\n\n    HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      var entries = this.entries;\n      for (var ii = 0, len = entries.length; ii < len; ii++) {\n        if (is(key, entries[ii][0])) {\n          return entries[ii][1];\n        }\n      }\n      return notSetValue;\n    };\n\n    HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n\n      var removed = value === NOT_SET;\n\n      if (keyHash !== this.keyHash) {\n        if (removed) {\n          return this;\n        }\n        SetRef(didAlter);\n        SetRef(didChangeSize);\n        return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);\n      }\n\n      var entries = this.entries;\n      var idx = 0;\n      for (var len = entries.length; idx < len; idx++) {\n        if (is(key, entries[idx][0])) {\n          break;\n        }\n      }\n      var exists = idx < len;\n\n      if (exists ? entries[idx][1] === value : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n      (removed || !exists) && SetRef(didChangeSize);\n\n      if (removed && len === 2) {\n        return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newEntries = isEditable ? entries : arrCopy(entries);\n\n      if (exists) {\n        if (removed) {\n          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n        } else {\n          newEntries[idx] = [key, value];\n        }\n      } else {\n        newEntries.push([key, value]);\n      }\n\n      if (isEditable) {\n        this.entries = newEntries;\n        return this;\n      }\n\n      return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n    };\n\n\n\n\n    function ValueNode(ownerID, keyHash, entry) {\n      this.ownerID = ownerID;\n      this.keyHash = keyHash;\n      this.entry = entry;\n    }\n\n    ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n    };\n\n    ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      var removed = value === NOT_SET;\n      var keyMatch = is(key, this.entry[0]);\n      if (keyMatch ? value === this.entry[1] : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n\n      if (removed) {\n        SetRef(didChangeSize);\n        return; // undefined\n      }\n\n      if (keyMatch) {\n        if (ownerID && ownerID === this.ownerID) {\n          this.entry[1] = value;\n          return this;\n        }\n        return new ValueNode(ownerID, this.keyHash, [key, value]);\n      }\n\n      SetRef(didChangeSize);\n      return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);\n    };\n\n\n\n  // #pragma Iterators\n\n  ArrayMapNode.prototype.iterate =\n  HashCollisionNode.prototype.iterate = function (fn, reverse) {\n    var entries = this.entries;\n    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {\n      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n        return false;\n      }\n    }\n  }\n\n  BitmapIndexedNode.prototype.iterate =\n  HashArrayMapNode.prototype.iterate = function (fn, reverse) {\n    var nodes = this.nodes;\n    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {\n      var node = nodes[reverse ? maxIndex - ii : ii];\n      if (node && node.iterate(fn, reverse) === false) {\n        return false;\n      }\n    }\n  }\n\n  ValueNode.prototype.iterate = function (fn, reverse) {\n    return fn(this.entry);\n  }\n\n  createClass(MapIterator, src_Iterator__Iterator);\n\n    function MapIterator(map, type, reverse) {\n      this._type = type;\n      this._reverse = reverse;\n      this._stack = map._root && mapIteratorFrame(map._root);\n    }\n\n    MapIterator.prototype.next = function() {\n      var type = this._type;\n      var stack = this._stack;\n      while (stack) {\n        var node = stack.node;\n        var index = stack.index++;\n        var maxIndex;\n        if (node.entry) {\n          if (index === 0) {\n            return mapIteratorValue(type, node.entry);\n          }\n        } else if (node.entries) {\n          maxIndex = node.entries.length - 1;\n          if (index <= maxIndex) {\n            return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);\n          }\n        } else {\n          maxIndex = node.nodes.length - 1;\n          if (index <= maxIndex) {\n            var subNode = node.nodes[this._reverse ? maxIndex - index : index];\n            if (subNode) {\n              if (subNode.entry) {\n                return mapIteratorValue(type, subNode.entry);\n              }\n              stack = this._stack = mapIteratorFrame(subNode, stack);\n            }\n            continue;\n          }\n        }\n        stack = this._stack = this._stack.__prev;\n      }\n      return iteratorDone();\n    };\n\n\n  function mapIteratorValue(type, entry) {\n    return iteratorValue(type, entry[0], entry[1]);\n  }\n\n  function mapIteratorFrame(node, prev) {\n    return {\n      node: node,\n      index: 0,\n      __prev: prev\n    };\n  }\n\n  function makeMap(size, root, ownerID, hash) {\n    var map = Object.create(MapPrototype);\n    map.size = size;\n    map._root = root;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n  }\n\n  var EMPTY_MAP;\n  function emptyMap() {\n    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n  }\n\n  function updateMap(map, k, v) {\n    var newRoot;\n    var newSize;\n    if (!map._root) {\n      if (v === NOT_SET) {\n        return map;\n      }\n      newSize = 1;\n      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);\n    } else {\n      var didChangeSize = MakeRef(CHANGE_LENGTH);\n      var didAlter = MakeRef(DID_ALTER);\n      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);\n      if (!didAlter.value) {\n        return map;\n      }\n      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);\n    }\n    if (map.__ownerID) {\n      map.size = newSize;\n      map._root = newRoot;\n      map.__hash = undefined;\n      map.__altered = true;\n      return map;\n    }\n    return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n  }\n\n  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    if (!node) {\n      if (value === NOT_SET) {\n        return node;\n      }\n      SetRef(didAlter);\n      SetRef(didChangeSize);\n      return new ValueNode(ownerID, keyHash, [key, value]);\n    }\n    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);\n  }\n\n  function isLeafNode(node) {\n    return node.constructor === ValueNode || node.constructor === HashCollisionNode;\n  }\n\n  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n    if (node.keyHash === keyHash) {\n      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);\n    }\n\n    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\n    var newNode;\n    var nodes = idx1 === idx2 ?\n      [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] :\n      ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2 ? [node, newNode] : [newNode, node]);\n\n    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);\n  }\n\n  function createNodes(ownerID, entries, key, value) {\n    if (!ownerID) {\n      ownerID = new OwnerID();\n    }\n    var node = new ValueNode(ownerID, hash(key), [key, value]);\n    for (var ii = 0; ii < entries.length; ii++) {\n      var entry = entries[ii];\n      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n    }\n    return node;\n  }\n\n  function packNodes(ownerID, nodes, count, excluding) {\n    var bitmap = 0;\n    var packedII = 0;\n    var packedNodes = new Array(count);\n    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {\n      var node = nodes[ii];\n      if (node !== undefined && ii !== excluding) {\n        bitmap |= bit;\n        packedNodes[packedII++] = node;\n      }\n    }\n    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n  }\n\n  function expandNodes(ownerID, nodes, bitmap, including, node) {\n    var count = 0;\n    var expandedNodes = new Array(SIZE);\n    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {\n      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n    }\n    expandedNodes[including] = node;\n    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n  }\n\n  function mergeIntoMapWith(map, merger, iterables) {\n    var iters = [];\n    for (var ii = 0; ii < iterables.length; ii++) {\n      var value = iterables[ii];\n      var iter = KeyedIterable(value);\n      if (!isIterable(value)) {\n        iter = iter.map(function(v ) {return fromJS(v)});\n      }\n      iters.push(iter);\n    }\n    return mergeIntoCollectionWith(map, merger, iters);\n  }\n\n  function deepMerger(merger) {\n    return function(existing, value) \n      {return existing && existing.mergeDeepWith && isIterable(value) ?\n        existing.mergeDeepWith(merger, value) :\n        merger ? merger(existing, value) : value};\n  }\n\n  function mergeIntoCollectionWith(collection, merger, iters) {\n    iters = iters.filter(function(x ) {return x.size !== 0});\n    if (iters.length === 0) {\n      return collection;\n    }\n    if (collection.size === 0 && iters.length === 1) {\n      return collection.constructor(iters[0]);\n    }\n    return collection.withMutations(function(collection ) {\n      var mergeIntoMap = merger ?\n        function(value, key)  {\n          collection.update(key, NOT_SET, function(existing )\n            {return existing === NOT_SET ? value : merger(existing, value)}\n          );\n        } :\n        function(value, key)  {\n          collection.set(key, value);\n        }\n      for (var ii = 0; ii < iters.length; ii++) {\n        iters[ii].forEach(mergeIntoMap);\n      }\n    });\n  }\n\n  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {\n    var isNotSet = existing === NOT_SET;\n    var step = keyPathIter.next();\n    if (step.done) {\n      var existingValue = isNotSet ? notSetValue : existing;\n      var newValue = updater(existingValue);\n      return newValue === existingValue ? existing : newValue;\n    }\n    invariant(\n      isNotSet || (existing && existing.set),\n      'invalid keyPath'\n    );\n    var key = step.value;\n    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);\n    var nextUpdated = updateInDeepMap(\n      nextExisting,\n      keyPathIter,\n      notSetValue,\n      updater\n    );\n    return nextUpdated === nextExisting ? existing :\n      nextUpdated === NOT_SET ? existing.remove(key) :\n      (isNotSet ? emptyMap() : existing).set(key, nextUpdated);\n  }\n\n  function popCount(x) {\n    x = x - ((x >> 1) & 0x55555555);\n    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n    x = (x + (x >> 4)) & 0x0f0f0f0f;\n    x = x + (x >> 8);\n    x = x + (x >> 16);\n    return x & 0x7f;\n  }\n\n  function setIn(array, idx, val, canEdit) {\n    var newArray = canEdit ? array : arrCopy(array);\n    newArray[idx] = val;\n    return newArray;\n  }\n\n  function spliceIn(array, idx, val, canEdit) {\n    var newLen = array.length + 1;\n    if (canEdit && idx + 1 === newLen) {\n      array[idx] = val;\n      return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for (var ii = 0; ii < newLen; ii++) {\n      if (ii === idx) {\n        newArray[ii] = val;\n        after = -1;\n      } else {\n        newArray[ii] = array[ii + after];\n      }\n    }\n    return newArray;\n  }\n\n  function spliceOut(array, idx, canEdit) {\n    var newLen = array.length - 1;\n    if (canEdit && idx === newLen) {\n      array.pop();\n      return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for (var ii = 0; ii < newLen; ii++) {\n      if (ii === idx) {\n        after = 1;\n      }\n      newArray[ii] = array[ii + after];\n    }\n    return newArray;\n  }\n\n  var MAX_ARRAY_MAP_SIZE = SIZE / 4;\n  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\n  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\n\n  createClass(List, IndexedCollection);\n\n    // @pragma Construction\n\n    function List(value) {\n      var empty = emptyList();\n      if (value === null || value === undefined) {\n        return empty;\n      }\n      if (isList(value)) {\n        return value;\n      }\n      var iter = IndexedIterable(value);\n      var size = iter.size;\n      if (size === 0) {\n        return empty;\n      }\n      assertNotInfinite(size);\n      if (size > 0 && size < SIZE) {\n        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n      }\n      return empty.withMutations(function(list ) {\n        list.setSize(size);\n        iter.forEach(function(v, i)  {return list.set(i, v)});\n      });\n    }\n\n    List.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    List.prototype.toString = function() {\n      return this.__toString('List [', ']');\n    };\n\n    // @pragma Access\n\n    List.prototype.get = function(index, notSetValue) {\n      index = wrapIndex(this, index);\n      if (index < 0 || index >= this.size) {\n        return notSetValue;\n      }\n      index += this._origin;\n      var node = listNodeFor(this, index);\n      return node && node.array[index & MASK];\n    };\n\n    // @pragma Modification\n\n    List.prototype.set = function(index, value) {\n      return updateList(this, index, value);\n    };\n\n    List.prototype.remove = function(index) {\n      return !this.has(index) ? this :\n        index === 0 ? this.shift() :\n        index === this.size - 1 ? this.pop() :\n        this.splice(index, 1);\n    };\n\n    List.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = this._origin = this._capacity = 0;\n        this._level = SHIFT;\n        this._root = this._tail = null;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyList();\n    };\n\n    List.prototype.push = function(/*...values*/) {\n      var values = arguments;\n      var oldSize = this.size;\n      return this.withMutations(function(list ) {\n        setListBounds(list, 0, oldSize + values.length);\n        for (var ii = 0; ii < values.length; ii++) {\n          list.set(oldSize + ii, values[ii]);\n        }\n      });\n    };\n\n    List.prototype.pop = function() {\n      return setListBounds(this, 0, -1);\n    };\n\n    List.prototype.unshift = function(/*...values*/) {\n      var values = arguments;\n      return this.withMutations(function(list ) {\n        setListBounds(list, -values.length);\n        for (var ii = 0; ii < values.length; ii++) {\n          list.set(ii, values[ii]);\n        }\n      });\n    };\n\n    List.prototype.shift = function() {\n      return setListBounds(this, 1);\n    };\n\n    // @pragma Composition\n\n    List.prototype.merge = function(/*...iters*/) {\n      return mergeIntoListWith(this, undefined, arguments);\n    };\n\n    List.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoListWith(this, merger, iters);\n    };\n\n    List.prototype.mergeDeep = function(/*...iters*/) {\n      return mergeIntoListWith(this, deepMerger(undefined), arguments);\n    };\n\n    List.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoListWith(this, deepMerger(merger), iters);\n    };\n\n    List.prototype.setSize = function(size) {\n      return setListBounds(this, 0, size);\n    };\n\n    // @pragma Iteration\n\n    List.prototype.slice = function(begin, end) {\n      var size = this.size;\n      if (wholeSlice(begin, end, size)) {\n        return this;\n      }\n      return setListBounds(\n        this,\n        resolveBegin(begin, size),\n        resolveEnd(end, size)\n      );\n    };\n\n    List.prototype.__iterator = function(type, reverse) {\n      var index = 0;\n      var values = iterateList(this, reverse);\n      return new src_Iterator__Iterator(function()  {\n        var value = values();\n        return value === DONE ?\n          iteratorDone() :\n          iteratorValue(type, index++, value);\n      });\n    };\n\n    List.prototype.__iterate = function(fn, reverse) {\n      var index = 0;\n      var values = iterateList(this, reverse);\n      var value;\n      while ((value = values()) !== DONE) {\n        if (fn(value, index++, this) === false) {\n          break;\n        }\n      }\n      return index;\n    };\n\n    List.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        return this;\n      }\n      return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);\n    };\n\n\n  function isList(maybeList) {\n    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);\n  }\n\n  List.isList = isList;\n\n  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\n\n  var ListPrototype = List.prototype;\n  ListPrototype[IS_LIST_SENTINEL] = true;\n  ListPrototype[DELETE] = ListPrototype.remove;\n  ListPrototype.setIn = MapPrototype.setIn;\n  ListPrototype.deleteIn =\n  ListPrototype.removeIn = MapPrototype.removeIn;\n  ListPrototype.update = MapPrototype.update;\n  ListPrototype.updateIn = MapPrototype.updateIn;\n  ListPrototype.mergeIn = MapPrototype.mergeIn;\n  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n  ListPrototype.withMutations = MapPrototype.withMutations;\n  ListPrototype.asMutable = MapPrototype.asMutable;\n  ListPrototype.asImmutable = MapPrototype.asImmutable;\n  ListPrototype.wasAltered = MapPrototype.wasAltered;\n\n\n\n    function VNode(array, ownerID) {\n      this.array = array;\n      this.ownerID = ownerID;\n    }\n\n    // TODO: seems like these methods are very similar\n\n    VNode.prototype.removeBefore = function(ownerID, level, index) {\n      if (index === level ? 1 << level : 0 || this.array.length === 0) {\n        return this;\n      }\n      var originIndex = (index >>> level) & MASK;\n      if (originIndex >= this.array.length) {\n        return new VNode([], ownerID);\n      }\n      var removingFirst = originIndex === 0;\n      var newChild;\n      if (level > 0) {\n        var oldChild = this.array[originIndex];\n        newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);\n        if (newChild === oldChild && removingFirst) {\n          return this;\n        }\n      }\n      if (removingFirst && !newChild) {\n        return this;\n      }\n      var editable = editableVNode(this, ownerID);\n      if (!removingFirst) {\n        for (var ii = 0; ii < originIndex; ii++) {\n          editable.array[ii] = undefined;\n        }\n      }\n      if (newChild) {\n        editable.array[originIndex] = newChild;\n      }\n      return editable;\n    };\n\n    VNode.prototype.removeAfter = function(ownerID, level, index) {\n      if (index === level ? 1 << level : 0 || this.array.length === 0) {\n        return this;\n      }\n      var sizeIndex = ((index - 1) >>> level) & MASK;\n      if (sizeIndex >= this.array.length) {\n        return this;\n      }\n      var removingLast = sizeIndex === this.array.length - 1;\n      var newChild;\n      if (level > 0) {\n        var oldChild = this.array[sizeIndex];\n        newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);\n        if (newChild === oldChild && removingLast) {\n          return this;\n        }\n      }\n      if (removingLast && !newChild) {\n        return this;\n      }\n      var editable = editableVNode(this, ownerID);\n      if (!removingLast) {\n        editable.array.pop();\n      }\n      if (newChild) {\n        editable.array[sizeIndex] = newChild;\n      }\n      return editable;\n    };\n\n\n\n  var DONE = {};\n\n  function iterateList(list, reverse) {\n    var left = list._origin;\n    var right = list._capacity;\n    var tailPos = getTailOffset(right);\n    var tail = list._tail;\n\n    return iterateNodeOrLeaf(list._root, list._level, 0);\n\n    function iterateNodeOrLeaf(node, level, offset) {\n      return level === 0 ?\n        iterateLeaf(node, offset) :\n        iterateNode(node, level, offset);\n    }\n\n    function iterateLeaf(node, offset) {\n      var array = offset === tailPos ? tail && tail.array : node && node.array;\n      var from = offset > left ? 0 : left - offset;\n      var to = right - offset;\n      if (to > SIZE) {\n        to = SIZE;\n      }\n      return function()  {\n        if (from === to) {\n          return DONE;\n        }\n        var idx = reverse ? --to : from++;\n        return array && array[idx];\n      };\n    }\n\n    function iterateNode(node, level, offset) {\n      var values;\n      var array = node && node.array;\n      var from = offset > left ? 0 : (left - offset) >> level;\n      var to = ((right - offset) >> level) + 1;\n      if (to > SIZE) {\n        to = SIZE;\n      }\n      return function()  {\n        do {\n          if (values) {\n            var value = values();\n            if (value !== DONE) {\n              return value;\n            }\n            values = null;\n          }\n          if (from === to) {\n            return DONE;\n          }\n          var idx = reverse ? --to : from++;\n          values = iterateNodeOrLeaf(\n            array && array[idx], level - SHIFT, offset + (idx << level)\n          );\n        } while (true);\n      };\n    }\n  }\n\n  function makeList(origin, capacity, level, root, tail, ownerID, hash) {\n    var list = Object.create(ListPrototype);\n    list.size = capacity - origin;\n    list._origin = origin;\n    list._capacity = capacity;\n    list._level = level;\n    list._root = root;\n    list._tail = tail;\n    list.__ownerID = ownerID;\n    list.__hash = hash;\n    list.__altered = false;\n    return list;\n  }\n\n  var EMPTY_LIST;\n  function emptyList() {\n    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n  }\n\n  function updateList(list, index, value) {\n    index = wrapIndex(list, index);\n\n    if (index >= list.size || index < 0) {\n      return list.withMutations(function(list ) {\n        index < 0 ?\n          setListBounds(list, index).set(0, value) :\n          setListBounds(list, 0, index + 1).set(index, value)\n      });\n    }\n\n    index += list._origin;\n\n    var newTail = list._tail;\n    var newRoot = list._root;\n    var didAlter = MakeRef(DID_ALTER);\n    if (index >= getTailOffset(list._capacity)) {\n      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n    } else {\n      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);\n    }\n\n    if (!didAlter.value) {\n      return list;\n    }\n\n    if (list.__ownerID) {\n      list._root = newRoot;\n      list._tail = newTail;\n      list.__hash = undefined;\n      list.__altered = true;\n      return list;\n    }\n    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n  }\n\n  function updateVNode(node, ownerID, level, index, value, didAlter) {\n    var idx = (index >>> level) & MASK;\n    var nodeHas = node && idx < node.array.length;\n    if (!nodeHas && value === undefined) {\n      return node;\n    }\n\n    var newNode;\n\n    if (level > 0) {\n      var lowerNode = node && node.array[idx];\n      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);\n      if (newLowerNode === lowerNode) {\n        return node;\n      }\n      newNode = editableVNode(node, ownerID);\n      newNode.array[idx] = newLowerNode;\n      return newNode;\n    }\n\n    if (nodeHas && node.array[idx] === value) {\n      return node;\n    }\n\n    SetRef(didAlter);\n\n    newNode = editableVNode(node, ownerID);\n    if (value === undefined && idx === newNode.array.length - 1) {\n      newNode.array.pop();\n    } else {\n      newNode.array[idx] = value;\n    }\n    return newNode;\n  }\n\n  function editableVNode(node, ownerID) {\n    if (ownerID && node && ownerID === node.ownerID) {\n      return node;\n    }\n    return new VNode(node ? node.array.slice() : [], ownerID);\n  }\n\n  function listNodeFor(list, rawIndex) {\n    if (rawIndex >= getTailOffset(list._capacity)) {\n      return list._tail;\n    }\n    if (rawIndex < 1 << (list._level + SHIFT)) {\n      var node = list._root;\n      var level = list._level;\n      while (node && level > 0) {\n        node = node.array[(rawIndex >>> level) & MASK];\n        level -= SHIFT;\n      }\n      return node;\n    }\n  }\n\n  function setListBounds(list, begin, end) {\n    var owner = list.__ownerID || new OwnerID();\n    var oldOrigin = list._origin;\n    var oldCapacity = list._capacity;\n    var newOrigin = oldOrigin + begin;\n    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;\n    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n      return list;\n    }\n\n    // If it's going to end after it starts, it's empty.\n    if (newOrigin >= newCapacity) {\n      return list.clear();\n    }\n\n    var newLevel = list._level;\n    var newRoot = list._root;\n\n    // New origin might require creating a higher root.\n    var offsetShift = 0;\n    while (newOrigin + offsetShift < 0) {\n      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);\n      newLevel += SHIFT;\n      offsetShift += 1 << newLevel;\n    }\n    if (offsetShift) {\n      newOrigin += offsetShift;\n      oldOrigin += offsetShift;\n      newCapacity += offsetShift;\n      oldCapacity += offsetShift;\n    }\n\n    var oldTailOffset = getTailOffset(oldCapacity);\n    var newTailOffset = getTailOffset(newCapacity);\n\n    // New size might require creating a higher root.\n    while (newTailOffset >= 1 << (newLevel + SHIFT)) {\n      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);\n      newLevel += SHIFT;\n    }\n\n    // Locate or create the new tail.\n    var oldTail = list._tail;\n    var newTail = newTailOffset < oldTailOffset ?\n      listNodeFor(list, newCapacity - 1) :\n      newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;\n\n    // Merge Tail into tree.\n    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {\n      newRoot = editableVNode(newRoot, owner);\n      var node = newRoot;\n      for (var level = newLevel; level > SHIFT; level -= SHIFT) {\n        var idx = (oldTailOffset >>> level) & MASK;\n        node = node.array[idx] = editableVNode(node.array[idx], owner);\n      }\n      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;\n    }\n\n    // If the size has been reduced, there's a chance the tail needs to be trimmed.\n    if (newCapacity < oldCapacity) {\n      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n    }\n\n    // If the new origin is within the tail, then we do not need a root.\n    if (newOrigin >= newTailOffset) {\n      newOrigin -= newTailOffset;\n      newCapacity -= newTailOffset;\n      newLevel = SHIFT;\n      newRoot = null;\n      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n\n    // Otherwise, if the root has been trimmed, garbage collect.\n    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n      offsetShift = 0;\n\n      // Identify the new top root node of the subtree of the old root.\n      while (newRoot) {\n        var beginIndex = (newOrigin >>> newLevel) & MASK;\n        if (beginIndex !== (newTailOffset >>> newLevel) & MASK) {\n          break;\n        }\n        if (beginIndex) {\n          offsetShift += (1 << newLevel) * beginIndex;\n        }\n        newLevel -= SHIFT;\n        newRoot = newRoot.array[beginIndex];\n      }\n\n      // Trim the new sides of the new root.\n      if (newRoot && newOrigin > oldOrigin) {\n        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n      }\n      if (newRoot && newTailOffset < oldTailOffset) {\n        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);\n      }\n      if (offsetShift) {\n        newOrigin -= offsetShift;\n        newCapacity -= offsetShift;\n      }\n    }\n\n    if (list.__ownerID) {\n      list.size = newCapacity - newOrigin;\n      list._origin = newOrigin;\n      list._capacity = newCapacity;\n      list._level = newLevel;\n      list._root = newRoot;\n      list._tail = newTail;\n      list.__hash = undefined;\n      list.__altered = true;\n      return list;\n    }\n    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n  }\n\n  function mergeIntoListWith(list, merger, iterables) {\n    var iters = [];\n    var maxSize = 0;\n    for (var ii = 0; ii < iterables.length; ii++) {\n      var value = iterables[ii];\n      var iter = IndexedIterable(value);\n      if (iter.size > maxSize) {\n        maxSize = iter.size;\n      }\n      if (!isIterable(value)) {\n        iter = iter.map(function(v ) {return fromJS(v)});\n      }\n      iters.push(iter);\n    }\n    if (maxSize > list.size) {\n      list = list.setSize(maxSize);\n    }\n    return mergeIntoCollectionWith(list, merger, iters);\n  }\n\n  function getTailOffset(size) {\n    return size < SIZE ? 0 : (((size - 1) >>> SHIFT) << SHIFT);\n  }\n\n  createClass(OrderedMap, src_Map__Map);\n\n    // @pragma Construction\n\n    function OrderedMap(value) {\n      return value === null || value === undefined ? emptyOrderedMap() :\n        isOrderedMap(value) ? value :\n        emptyOrderedMap().withMutations(function(map ) {\n          var iter = KeyedIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v, k)  {return map.set(k, v)});\n        });\n    }\n\n    OrderedMap.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    OrderedMap.prototype.toString = function() {\n      return this.__toString('OrderedMap {', '}');\n    };\n\n    // @pragma Access\n\n    OrderedMap.prototype.get = function(k, notSetValue) {\n      var index = this._map.get(k);\n      return index !== undefined ? this._list.get(index)[1] : notSetValue;\n    };\n\n    // @pragma Modification\n\n    OrderedMap.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._map.clear();\n        this._list.clear();\n        return this;\n      }\n      return emptyOrderedMap();\n    };\n\n    OrderedMap.prototype.set = function(k, v) {\n      return updateOrderedMap(this, k, v);\n    };\n\n    OrderedMap.prototype.remove = function(k) {\n      return updateOrderedMap(this, k, NOT_SET);\n    };\n\n    OrderedMap.prototype.wasAltered = function() {\n      return this._map.wasAltered() || this._list.wasAltered();\n    };\n\n    OrderedMap.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._list.__iterate(\n        function(entry ) {return entry && fn(entry[1], entry[0], this$0)},\n        reverse\n      );\n    };\n\n    OrderedMap.prototype.__iterator = function(type, reverse) {\n      return this._list.fromEntrySeq().__iterator(type, reverse);\n    };\n\n    OrderedMap.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map.__ensureOwner(ownerID);\n      var newList = this._list.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        this._list = newList;\n        return this;\n      }\n      return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n    };\n\n\n  function isOrderedMap(maybeOrderedMap) {\n    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n  }\n\n  OrderedMap.isOrderedMap = isOrderedMap;\n\n  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;\n  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\n\n\n\n  function makeOrderedMap(map, list, ownerID, hash) {\n    var omap = Object.create(OrderedMap.prototype);\n    omap.size = map ? map.size : 0;\n    omap._map = map;\n    omap._list = list;\n    omap.__ownerID = ownerID;\n    omap.__hash = hash;\n    return omap;\n  }\n\n  var EMPTY_ORDERED_MAP;\n  function emptyOrderedMap() {\n    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));\n  }\n\n  function updateOrderedMap(omap, k, v) {\n    var map = omap._map;\n    var list = omap._list;\n    var i = map.get(k);\n    var has = i !== undefined;\n    var newMap;\n    var newList;\n    if (v === NOT_SET) { // removed\n      if (!has) {\n        return omap;\n      }\n      if (list.size >= SIZE && list.size >= map.size * 2) {\n        newList = list.filter(function(entry, idx)  {return entry !== undefined && i !== idx});\n        newMap = newList.toKeyedSeq().map(function(entry ) {return entry[0]}).flip().toMap();\n        if (omap.__ownerID) {\n          newMap.__ownerID = newList.__ownerID = omap.__ownerID;\n        }\n      } else {\n        newMap = map.remove(k);\n        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n      }\n    } else {\n      if (has) {\n        if (v === list.get(i)[1]) {\n          return omap;\n        }\n        newMap = map;\n        newList = list.set(i, [k, v]);\n      } else {\n        newMap = map.set(k, list.size);\n        newList = list.set(list.size, [k, v]);\n      }\n    }\n    if (omap.__ownerID) {\n      omap.size = newMap.size;\n      omap._map = newMap;\n      omap._list = newList;\n      omap.__hash = undefined;\n      return omap;\n    }\n    return makeOrderedMap(newMap, newList);\n  }\n\n  createClass(Stack, IndexedCollection);\n\n    // @pragma Construction\n\n    function Stack(value) {\n      return value === null || value === undefined ? emptyStack() :\n        isStack(value) ? value :\n        emptyStack().unshiftAll(value);\n    }\n\n    Stack.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    Stack.prototype.toString = function() {\n      return this.__toString('Stack [', ']');\n    };\n\n    // @pragma Access\n\n    Stack.prototype.get = function(index, notSetValue) {\n      var head = this._head;\n      index = wrapIndex(this, index);\n      while (head && index--) {\n        head = head.next;\n      }\n      return head ? head.value : notSetValue;\n    };\n\n    Stack.prototype.peek = function() {\n      return this._head && this._head.value;\n    };\n\n    // @pragma Modification\n\n    Stack.prototype.push = function(/*...values*/) {\n      if (arguments.length === 0) {\n        return this;\n      }\n      var newSize = this.size + arguments.length;\n      var head = this._head;\n      for (var ii = arguments.length - 1; ii >= 0; ii--) {\n        head = {\n          value: arguments[ii],\n          next: head\n        };\n      }\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    Stack.prototype.pushAll = function(iter) {\n      iter = IndexedIterable(iter);\n      if (iter.size === 0) {\n        return this;\n      }\n      assertNotInfinite(iter.size);\n      var newSize = this.size;\n      var head = this._head;\n      iter.reverse().forEach(function(value ) {\n        newSize++;\n        head = {\n          value: value,\n          next: head\n        };\n      });\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    Stack.prototype.pop = function() {\n      return this.slice(1);\n    };\n\n    Stack.prototype.unshift = function(/*...values*/) {\n      return this.push.apply(this, arguments);\n    };\n\n    Stack.prototype.unshiftAll = function(iter) {\n      return this.pushAll(iter);\n    };\n\n    Stack.prototype.shift = function() {\n      return this.pop.apply(this, arguments);\n    };\n\n    Stack.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._head = undefined;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyStack();\n    };\n\n    Stack.prototype.slice = function(begin, end) {\n      if (wholeSlice(begin, end, this.size)) {\n        return this;\n      }\n      var resolvedBegin = resolveBegin(begin, this.size);\n      var resolvedEnd = resolveEnd(end, this.size);\n      if (resolvedEnd !== this.size) {\n        // super.slice(begin, end);\n        return IndexedCollection.prototype.slice.call(this, begin, end);\n      }\n      var newSize = this.size - resolvedBegin;\n      var head = this._head;\n      while (resolvedBegin--) {\n        head = head.next;\n      }\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    // @pragma Mutability\n\n    Stack.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        return this;\n      }\n      return makeStack(this.size, this._head, ownerID, this.__hash);\n    };\n\n    // @pragma Iteration\n\n    Stack.prototype.__iterate = function(fn, reverse) {\n      if (reverse) {\n        return this.reverse().__iterate(fn);\n      }\n      var iterations = 0;\n      var node = this._head;\n      while (node) {\n        if (fn(node.value, iterations++, this) === false) {\n          break;\n        }\n        node = node.next;\n      }\n      return iterations;\n    };\n\n    Stack.prototype.__iterator = function(type, reverse) {\n      if (reverse) {\n        return this.reverse().__iterator(type);\n      }\n      var iterations = 0;\n      var node = this._head;\n      return new src_Iterator__Iterator(function()  {\n        if (node) {\n          var value = node.value;\n          node = node.next;\n          return iteratorValue(type, iterations++, value);\n        }\n        return iteratorDone();\n      });\n    };\n\n\n  function isStack(maybeStack) {\n    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);\n  }\n\n  Stack.isStack = isStack;\n\n  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\n\n  var StackPrototype = Stack.prototype;\n  StackPrototype[IS_STACK_SENTINEL] = true;\n  StackPrototype.withMutations = MapPrototype.withMutations;\n  StackPrototype.asMutable = MapPrototype.asMutable;\n  StackPrototype.asImmutable = MapPrototype.asImmutable;\n  StackPrototype.wasAltered = MapPrototype.wasAltered;\n\n\n  function makeStack(size, head, ownerID, hash) {\n    var map = Object.create(StackPrototype);\n    map.size = size;\n    map._head = head;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n  }\n\n  var EMPTY_STACK;\n  function emptyStack() {\n    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n  }\n\n  createClass(src_Set__Set, SetCollection);\n\n    // @pragma Construction\n\n    function src_Set__Set(value) {\n      return value === null || value === undefined ? emptySet() :\n        isSet(value) ? value :\n        emptySet().withMutations(function(set ) {\n          var iter = SetIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v ) {return set.add(v)});\n        });\n    }\n\n    src_Set__Set.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    src_Set__Set.fromKeys = function(value) {\n      return this(KeyedIterable(value).keySeq());\n    };\n\n    src_Set__Set.prototype.toString = function() {\n      return this.__toString('Set {', '}');\n    };\n\n    // @pragma Access\n\n    src_Set__Set.prototype.has = function(value) {\n      return this._map.has(value);\n    };\n\n    // @pragma Modification\n\n    src_Set__Set.prototype.add = function(value) {\n      return updateSet(this, this._map.set(value, true));\n    };\n\n    src_Set__Set.prototype.remove = function(value) {\n      return updateSet(this, this._map.remove(value));\n    };\n\n    src_Set__Set.prototype.clear = function() {\n      return updateSet(this, this._map.clear());\n    };\n\n    // @pragma Composition\n\n    src_Set__Set.prototype.union = function() {var iters = SLICE$0.call(arguments, 0);\n      iters = iters.filter(function(x ) {return x.size !== 0});\n      if (iters.length === 0) {\n        return this;\n      }\n      if (this.size === 0 && iters.length === 1) {\n        return this.constructor(iters[0]);\n      }\n      return this.withMutations(function(set ) {\n        for (var ii = 0; ii < iters.length; ii++) {\n          SetIterable(iters[ii]).forEach(function(value ) {return set.add(value)});\n        }\n      });\n    };\n\n    src_Set__Set.prototype.intersect = function() {var iters = SLICE$0.call(arguments, 0);\n      if (iters.length === 0) {\n        return this;\n      }\n      iters = iters.map(function(iter ) {return SetIterable(iter)});\n      var originalSet = this;\n      return this.withMutations(function(set ) {\n        originalSet.forEach(function(value ) {\n          if (!iters.every(function(iter ) {return iter.contains(value)})) {\n            set.remove(value);\n          }\n        });\n      });\n    };\n\n    src_Set__Set.prototype.subtract = function() {var iters = SLICE$0.call(arguments, 0);\n      if (iters.length === 0) {\n        return this;\n      }\n      iters = iters.map(function(iter ) {return SetIterable(iter)});\n      var originalSet = this;\n      return this.withMutations(function(set ) {\n        originalSet.forEach(function(value ) {\n          if (iters.some(function(iter ) {return iter.contains(value)})) {\n            set.remove(value);\n          }\n        });\n      });\n    };\n\n    src_Set__Set.prototype.merge = function() {\n      return this.union.apply(this, arguments);\n    };\n\n    src_Set__Set.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return this.union.apply(this, iters);\n    };\n\n    src_Set__Set.prototype.sort = function(comparator) {\n      // Late binding\n      return OrderedSet(sortFactory(this, comparator));\n    };\n\n    src_Set__Set.prototype.sortBy = function(mapper, comparator) {\n      // Late binding\n      return OrderedSet(sortFactory(this, comparator, mapper));\n    };\n\n    src_Set__Set.prototype.wasAltered = function() {\n      return this._map.wasAltered();\n    };\n\n    src_Set__Set.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._map.__iterate(function(_, k)  {return fn(k, k, this$0)}, reverse);\n    };\n\n    src_Set__Set.prototype.__iterator = function(type, reverse) {\n      return this._map.map(function(_, k)  {return k}).__iterator(type, reverse);\n    };\n\n    src_Set__Set.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        return this;\n      }\n      return this.__make(newMap, ownerID);\n    };\n\n\n  function isSet(maybeSet) {\n    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);\n  }\n\n  src_Set__Set.isSet = isSet;\n\n  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\n\n  var SetPrototype = src_Set__Set.prototype;\n  SetPrototype[IS_SET_SENTINEL] = true;\n  SetPrototype[DELETE] = SetPrototype.remove;\n  SetPrototype.mergeDeep = SetPrototype.merge;\n  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;\n  SetPrototype.withMutations = MapPrototype.withMutations;\n  SetPrototype.asMutable = MapPrototype.asMutable;\n  SetPrototype.asImmutable = MapPrototype.asImmutable;\n\n  SetPrototype.__empty = emptySet;\n  SetPrototype.__make = makeSet;\n\n  function updateSet(set, newMap) {\n    if (set.__ownerID) {\n      set.size = newMap.size;\n      set._map = newMap;\n      return set;\n    }\n    return newMap === set._map ? set :\n      newMap.size === 0 ? set.__empty() :\n      set.__make(newMap);\n  }\n\n  function makeSet(map, ownerID) {\n    var set = Object.create(SetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n  }\n\n  var EMPTY_SET;\n  function emptySet() {\n    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n  }\n\n  createClass(OrderedSet, src_Set__Set);\n\n    // @pragma Construction\n\n    function OrderedSet(value) {\n      return value === null || value === undefined ? emptyOrderedSet() :\n        isOrderedSet(value) ? value :\n        emptyOrderedSet().withMutations(function(set ) {\n          var iter = SetIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v ) {return set.add(v)});\n        });\n    }\n\n    OrderedSet.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    OrderedSet.fromKeys = function(value) {\n      return this(KeyedIterable(value).keySeq());\n    };\n\n    OrderedSet.prototype.toString = function() {\n      return this.__toString('OrderedSet {', '}');\n    };\n\n\n  function isOrderedSet(maybeOrderedSet) {\n    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n  }\n\n  OrderedSet.isOrderedSet = isOrderedSet;\n\n  var OrderedSetPrototype = OrderedSet.prototype;\n  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;\n\n  OrderedSetPrototype.__empty = emptyOrderedSet;\n  OrderedSetPrototype.__make = makeOrderedSet;\n\n  function makeOrderedSet(map, ownerID) {\n    var set = Object.create(OrderedSetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n  }\n\n  var EMPTY_ORDERED_SET;\n  function emptyOrderedSet() {\n    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));\n  }\n\n  createClass(Record, KeyedCollection);\n\n    function Record(defaultValues, name) {\n      var RecordType = function Record(values) {\n        if (!(this instanceof RecordType)) {\n          return new RecordType(values);\n        }\n        this._map = src_Map__Map(values);\n      };\n\n      var keys = Object.keys(defaultValues);\n\n      var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);\n      RecordTypePrototype.constructor = RecordType;\n      name && (RecordTypePrototype._name = name);\n      RecordTypePrototype._defaultValues = defaultValues;\n      RecordTypePrototype._keys = keys;\n      RecordTypePrototype.size = keys.length;\n\n      try {\n        keys.forEach(function(key ) {\n          Object.defineProperty(RecordType.prototype, key, {\n            get: function() {\n              return this.get(key);\n            },\n            set: function(value) {\n              invariant(this.__ownerID, 'Cannot set on an immutable record.');\n              this.set(key, value);\n            }\n          });\n        });\n      } catch (error) {\n        // Object.defineProperty failed. Probably IE8.\n      }\n\n      return RecordType;\n    }\n\n    Record.prototype.toString = function() {\n      return this.__toString(recordName(this) + ' {', '}');\n    };\n\n    // @pragma Access\n\n    Record.prototype.has = function(k) {\n      return this._defaultValues.hasOwnProperty(k);\n    };\n\n    Record.prototype.get = function(k, notSetValue) {\n      if (!this.has(k)) {\n        return notSetValue;\n      }\n      var defaultVal = this._defaultValues[k];\n      return this._map ? this._map.get(k, defaultVal) : defaultVal;\n    };\n\n    // @pragma Modification\n\n    Record.prototype.clear = function() {\n      if (this.__ownerID) {\n        this._map && this._map.clear();\n        return this;\n      }\n      var SuperRecord = Object.getPrototypeOf(this).constructor;\n      return SuperRecord._empty || (SuperRecord._empty = makeRecord(this, emptyMap()));\n    };\n\n    Record.prototype.set = function(k, v) {\n      if (!this.has(k)) {\n        throw new Error('Cannot set unknown key \"' + k + '\" on ' + recordName(this));\n      }\n      var newMap = this._map && this._map.set(k, v);\n      if (this.__ownerID || newMap === this._map) {\n        return this;\n      }\n      return makeRecord(this, newMap);\n    };\n\n    Record.prototype.remove = function(k) {\n      if (!this.has(k)) {\n        return this;\n      }\n      var newMap = this._map && this._map.remove(k);\n      if (this.__ownerID || newMap === this._map) {\n        return this;\n      }\n      return makeRecord(this, newMap);\n    };\n\n    Record.prototype.wasAltered = function() {\n      return this._map.wasAltered();\n    };\n\n    Record.prototype.__iterator = function(type, reverse) {var this$0 = this;\n      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterator(type, reverse);\n    };\n\n    Record.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterate(fn, reverse);\n    };\n\n    Record.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map && this._map.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        return this;\n      }\n      return makeRecord(this, newMap, ownerID);\n    };\n\n\n  var RecordPrototype = Record.prototype;\n  RecordPrototype[DELETE] = RecordPrototype.remove;\n  RecordPrototype.deleteIn =\n  RecordPrototype.removeIn = MapPrototype.removeIn;\n  RecordPrototype.merge = MapPrototype.merge;\n  RecordPrototype.mergeWith = MapPrototype.mergeWith;\n  RecordPrototype.mergeIn = MapPrototype.mergeIn;\n  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;\n  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;\n  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n  RecordPrototype.setIn = MapPrototype.setIn;\n  RecordPrototype.update = MapPrototype.update;\n  RecordPrototype.updateIn = MapPrototype.updateIn;\n  RecordPrototype.withMutations = MapPrototype.withMutations;\n  RecordPrototype.asMutable = MapPrototype.asMutable;\n  RecordPrototype.asImmutable = MapPrototype.asImmutable;\n\n\n  function makeRecord(likeRecord, map, ownerID) {\n    var record = Object.create(Object.getPrototypeOf(likeRecord));\n    record._map = map;\n    record.__ownerID = ownerID;\n    return record;\n  }\n\n  function recordName(record) {\n    return record._name || record.constructor.name;\n  }\n\n  function deepEqual(a, b) {\n    if (a === b) {\n      return true;\n    }\n\n    if (\n      !isIterable(b) ||\n      a.size !== undefined && b.size !== undefined && a.size !== b.size ||\n      a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash ||\n      isKeyed(a) !== isKeyed(b) ||\n      isIndexed(a) !== isIndexed(b) ||\n      isOrdered(a) !== isOrdered(b)\n    ) {\n      return false;\n    }\n\n    if (a.size === 0 && b.size === 0) {\n      return true;\n    }\n\n    var notAssociative = !isAssociative(a);\n\n    if (isOrdered(a)) {\n      var entries = a.entries();\n      return b.every(function(v, k)  {\n        var entry = entries.next().value;\n        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n      }) && entries.next().done;\n    }\n\n    var flipped = false;\n\n    if (a.size === undefined) {\n      if (b.size === undefined) {\n        a.cacheResult();\n      } else {\n        flipped = true;\n        var _ = a;\n        a = b;\n        b = _;\n      }\n    }\n\n    var allEqual = true;\n    var bSize = b.__iterate(function(v, k)  {\n      if (notAssociative ? !a.has(v) :\n          flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {\n        allEqual = false;\n        return false;\n      }\n    });\n\n    return allEqual && a.size === bSize;\n  }\n\n  createClass(Range, IndexedSeq);\n\n    function Range(start, end, step) {\n      if (!(this instanceof Range)) {\n        return new Range(start, end, step);\n      }\n      invariant(step !== 0, 'Cannot step a Range by 0');\n      start = start || 0;\n      if (end === undefined) {\n        end = Infinity;\n      }\n      step = step === undefined ? 1 : Math.abs(step);\n      if (end < start) {\n        step = -step;\n      }\n      this._start = start;\n      this._end = end;\n      this._step = step;\n      this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n      if (this.size === 0) {\n        if (EMPTY_RANGE) {\n          return EMPTY_RANGE;\n        }\n        EMPTY_RANGE = this;\n      }\n    }\n\n    Range.prototype.toString = function() {\n      if (this.size === 0) {\n        return 'Range []';\n      }\n      return 'Range [ ' +\n        this._start + '...' + this._end +\n        (this._step > 1 ? ' by ' + this._step : '') +\n      ' ]';\n    };\n\n    Range.prototype.get = function(index, notSetValue) {\n      return this.has(index) ?\n        this._start + wrapIndex(this, index) * this._step :\n        notSetValue;\n    };\n\n    Range.prototype.contains = function(searchValue) {\n      var possibleIndex = (searchValue - this._start) / this._step;\n      return possibleIndex >= 0 &&\n        possibleIndex < this.size &&\n        possibleIndex === Math.floor(possibleIndex);\n    };\n\n    Range.prototype.slice = function(begin, end) {\n      if (wholeSlice(begin, end, this.size)) {\n        return this;\n      }\n      begin = resolveBegin(begin, this.size);\n      end = resolveEnd(end, this.size);\n      if (end <= begin) {\n        return new Range(0, 0);\n      }\n      return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);\n    };\n\n    Range.prototype.indexOf = function(searchValue) {\n      var offsetValue = searchValue - this._start;\n      if (offsetValue % this._step === 0) {\n        var index = offsetValue / this._step;\n        if (index >= 0 && index < this.size) {\n          return index\n        }\n      }\n      return -1;\n    };\n\n    Range.prototype.lastIndexOf = function(searchValue) {\n      return this.indexOf(searchValue);\n    };\n\n    Range.prototype.__iterate = function(fn, reverse) {\n      var maxIndex = this.size - 1;\n      var step = this._step;\n      var value = reverse ? this._start + maxIndex * step : this._start;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        if (fn(value, ii, this) === false) {\n          return ii + 1;\n        }\n        value += reverse ? -step : step;\n      }\n      return ii;\n    };\n\n    Range.prototype.__iterator = function(type, reverse) {\n      var maxIndex = this.size - 1;\n      var step = this._step;\n      var value = reverse ? this._start + maxIndex * step : this._start;\n      var ii = 0;\n      return new src_Iterator__Iterator(function()  {\n        var v = value;\n        value += reverse ? -step : step;\n        return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);\n      });\n    };\n\n    Range.prototype.equals = function(other) {\n      return other instanceof Range ?\n        this._start === other._start &&\n        this._end === other._end &&\n        this._step === other._step :\n        deepEqual(this, other);\n    };\n\n\n  var EMPTY_RANGE;\n\n  createClass(Repeat, IndexedSeq);\n\n    function Repeat(value, times) {\n      if (!(this instanceof Repeat)) {\n        return new Repeat(value, times);\n      }\n      this._value = value;\n      this.size = times === undefined ? Infinity : Math.max(0, times);\n      if (this.size === 0) {\n        if (EMPTY_REPEAT) {\n          return EMPTY_REPEAT;\n        }\n        EMPTY_REPEAT = this;\n      }\n    }\n\n    Repeat.prototype.toString = function() {\n      if (this.size === 0) {\n        return 'Repeat []';\n      }\n      return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';\n    };\n\n    Repeat.prototype.get = function(index, notSetValue) {\n      return this.has(index) ? this._value : notSetValue;\n    };\n\n    Repeat.prototype.contains = function(searchValue) {\n      return is(this._value, searchValue);\n    };\n\n    Repeat.prototype.slice = function(begin, end) {\n      var size = this.size;\n      return wholeSlice(begin, end, size) ? this :\n        new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));\n    };\n\n    Repeat.prototype.reverse = function() {\n      return this;\n    };\n\n    Repeat.prototype.indexOf = function(searchValue) {\n      if (is(this._value, searchValue)) {\n        return 0;\n      }\n      return -1;\n    };\n\n    Repeat.prototype.lastIndexOf = function(searchValue) {\n      if (is(this._value, searchValue)) {\n        return this.size;\n      }\n      return -1;\n    };\n\n    Repeat.prototype.__iterate = function(fn, reverse) {\n      for (var ii = 0; ii < this.size; ii++) {\n        if (fn(this._value, ii, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    Repeat.prototype.__iterator = function(type, reverse) {var this$0 = this;\n      var ii = 0;\n      return new src_Iterator__Iterator(function() \n        {return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone()}\n      );\n    };\n\n    Repeat.prototype.equals = function(other) {\n      return other instanceof Repeat ?\n        is(this._value, other._value) :\n        deepEqual(other);\n    };\n\n\n  var EMPTY_REPEAT;\n\n  /**\n   * Contributes additional methods to a constructor\n   */\n  function mixin(ctor, methods) {\n    var keyCopier = function(key ) { ctor.prototype[key] = methods[key]; };\n    Object.keys(methods).forEach(keyCopier);\n    Object.getOwnPropertySymbols &&\n      Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n    return ctor;\n  }\n\n  Iterable.Iterator = src_Iterator__Iterator;\n\n  mixin(Iterable, {\n\n    // ### Conversion to other types\n\n    toArray: function() {\n      assertNotInfinite(this.size);\n      var array = new Array(this.size || 0);\n      this.valueSeq().__iterate(function(v, i)  { array[i] = v; });\n      return array;\n    },\n\n    toIndexedSeq: function() {\n      return new ToIndexedSequence(this);\n    },\n\n    toJS: function() {\n      return this.toSeq().map(\n        function(value ) {return value && typeof value.toJS === 'function' ? value.toJS() : value}\n      ).__toJS();\n    },\n\n    toJSON: function() {\n      return this.toSeq().map(\n        function(value ) {return value && typeof value.toJSON === 'function' ? value.toJSON() : value}\n      ).__toJS();\n    },\n\n    toKeyedSeq: function() {\n      return new ToKeyedSequence(this, true);\n    },\n\n    toMap: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return src_Map__Map(this.toKeyedSeq());\n    },\n\n    toObject: function() {\n      assertNotInfinite(this.size);\n      var object = {};\n      this.__iterate(function(v, k)  { object[k] = v; });\n      return object;\n    },\n\n    toOrderedMap: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return OrderedMap(this.toKeyedSeq());\n    },\n\n    toOrderedSet: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toSet: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return src_Set__Set(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toSetSeq: function() {\n      return new ToSetSequence(this);\n    },\n\n    toSeq: function() {\n      return isIndexed(this) ? this.toIndexedSeq() :\n        isKeyed(this) ? this.toKeyedSeq() :\n        this.toSetSeq();\n    },\n\n    toStack: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Stack(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toList: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return List(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n\n    // ### Common JavaScript methods and properties\n\n    toString: function() {\n      return '[Iterable]';\n    },\n\n    __toString: function(head, tail) {\n      if (this.size === 0) {\n        return head + tail;\n      }\n      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;\n    },\n\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    concat: function() {var values = SLICE$0.call(arguments, 0);\n      return reify(this, concatFactory(this, values));\n    },\n\n    contains: function(searchValue) {\n      return this.some(function(value ) {return is(value, searchValue)});\n    },\n\n    entries: function() {\n      return this.__iterator(ITERATE_ENTRIES);\n    },\n\n    every: function(predicate, context) {\n      assertNotInfinite(this.size);\n      var returnValue = true;\n      this.__iterate(function(v, k, c)  {\n        if (!predicate.call(context, v, k, c)) {\n          returnValue = false;\n          return false;\n        }\n      });\n      return returnValue;\n    },\n\n    filter: function(predicate, context) {\n      return reify(this, filterFactory(this, predicate, context, true));\n    },\n\n    find: function(predicate, context, notSetValue) {\n      var entry = this.findEntry(predicate, context);\n      return entry ? entry[1] : notSetValue;\n    },\n\n    findEntry: function(predicate, context) {\n      var found;\n      this.__iterate(function(v, k, c)  {\n        if (predicate.call(context, v, k, c)) {\n          found = [k, v];\n          return false;\n        }\n      });\n      return found;\n    },\n\n    findLastEntry: function(predicate, context) {\n      return this.toSeq().reverse().findEntry(predicate, context);\n    },\n\n    forEach: function(sideEffect, context) {\n      assertNotInfinite(this.size);\n      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n    },\n\n    join: function(separator) {\n      assertNotInfinite(this.size);\n      separator = separator !== undefined ? '' + separator : ',';\n      var joined = '';\n      var isFirst = true;\n      this.__iterate(function(v ) {\n        isFirst ? (isFirst = false) : (joined += separator);\n        joined += v !== null && v !== undefined ? v.toString() : '';\n      });\n      return joined;\n    },\n\n    keys: function() {\n      return this.__iterator(ITERATE_KEYS);\n    },\n\n    map: function(mapper, context) {\n      return reify(this, mapFactory(this, mapper, context));\n    },\n\n    reduce: function(reducer, initialReduction, context) {\n      assertNotInfinite(this.size);\n      var reduction;\n      var useFirst;\n      if (arguments.length < 2) {\n        useFirst = true;\n      } else {\n        reduction = initialReduction;\n      }\n      this.__iterate(function(v, k, c)  {\n        if (useFirst) {\n          useFirst = false;\n          reduction = v;\n        } else {\n          reduction = reducer.call(context, reduction, v, k, c);\n        }\n      });\n      return reduction;\n    },\n\n    reduceRight: function(reducer, initialReduction, context) {\n      var reversed = this.toKeyedSeq().reverse();\n      return reversed.reduce.apply(reversed, arguments);\n    },\n\n    reverse: function() {\n      return reify(this, reverseFactory(this, true));\n    },\n\n    slice: function(begin, end) {\n      return reify(this, sliceFactory(this, begin, end, true));\n    },\n\n    some: function(predicate, context) {\n      return !this.every(not(predicate), context);\n    },\n\n    sort: function(comparator) {\n      return reify(this, sortFactory(this, comparator));\n    },\n\n    values: function() {\n      return this.__iterator(ITERATE_VALUES);\n    },\n\n\n    // ### More sequential methods\n\n    butLast: function() {\n      return this.slice(0, -1);\n    },\n\n    isEmpty: function() {\n      return this.size !== undefined ? this.size === 0 : !this.some(function()  {return true});\n    },\n\n    count: function(predicate, context) {\n      return ensureSize(\n        predicate ? this.toSeq().filter(predicate, context) : this\n      );\n    },\n\n    countBy: function(grouper, context) {\n      return countByFactory(this, grouper, context);\n    },\n\n    equals: function(other) {\n      return deepEqual(this, other);\n    },\n\n    entrySeq: function() {\n      var iterable = this;\n      if (iterable._cache) {\n        // We cache as an entries array, so we can just return the cache!\n        return new ArraySeq(iterable._cache);\n      }\n      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();\n      entriesSequence.fromEntrySeq = function()  {return iterable.toSeq()};\n      return entriesSequence;\n    },\n\n    filterNot: function(predicate, context) {\n      return this.filter(not(predicate), context);\n    },\n\n    findLast: function(predicate, context, notSetValue) {\n      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);\n    },\n\n    first: function() {\n      return this.find(returnTrue);\n    },\n\n    flatMap: function(mapper, context) {\n      return reify(this, flatMapFactory(this, mapper, context));\n    },\n\n    flatten: function(depth) {\n      return reify(this, flattenFactory(this, depth, true));\n    },\n\n    fromEntrySeq: function() {\n      return new FromEntriesSequence(this);\n    },\n\n    get: function(searchKey, notSetValue) {\n      return this.find(function(_, key)  {return is(key, searchKey)}, undefined, notSetValue);\n    },\n\n    getIn: function(searchKeyPath, notSetValue) {\n      var nested = this;\n      // Note: in an ES6 environment, we would prefer:\n      // for (var key of searchKeyPath) {\n      var iter = forceIterator(searchKeyPath);\n      var step;\n      while (!(step = iter.next()).done) {\n        var key = step.value;\n        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;\n        if (nested === NOT_SET) {\n          return notSetValue;\n        }\n      }\n      return nested;\n    },\n\n    groupBy: function(grouper, context) {\n      return groupByFactory(this, grouper, context);\n    },\n\n    has: function(searchKey) {\n      return this.get(searchKey, NOT_SET) !== NOT_SET;\n    },\n\n    hasIn: function(searchKeyPath) {\n      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;\n    },\n\n    isSubset: function(iter) {\n      iter = typeof iter.contains === 'function' ? iter : Iterable(iter);\n      return this.every(function(value ) {return iter.contains(value)});\n    },\n\n    isSuperset: function(iter) {\n      return iter.isSubset(this);\n    },\n\n    keySeq: function() {\n      return this.toSeq().map(keyMapper).toIndexedSeq();\n    },\n\n    last: function() {\n      return this.toSeq().reverse().first();\n    },\n\n    max: function(comparator) {\n      return maxFactory(this, comparator);\n    },\n\n    maxBy: function(mapper, comparator) {\n      return maxFactory(this, comparator, mapper);\n    },\n\n    min: function(comparator) {\n      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);\n    },\n\n    minBy: function(mapper, comparator) {\n      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);\n    },\n\n    rest: function() {\n      return this.slice(1);\n    },\n\n    skip: function(amount) {\n      return this.slice(Math.max(0, amount));\n    },\n\n    skipLast: function(amount) {\n      return reify(this, this.toSeq().reverse().skip(amount).reverse());\n    },\n\n    skipWhile: function(predicate, context) {\n      return reify(this, skipWhileFactory(this, predicate, context, true));\n    },\n\n    skipUntil: function(predicate, context) {\n      return this.skipWhile(not(predicate), context);\n    },\n\n    sortBy: function(mapper, comparator) {\n      return reify(this, sortFactory(this, comparator, mapper));\n    },\n\n    take: function(amount) {\n      return this.slice(0, Math.max(0, amount));\n    },\n\n    takeLast: function(amount) {\n      return reify(this, this.toSeq().reverse().take(amount).reverse());\n    },\n\n    takeWhile: function(predicate, context) {\n      return reify(this, takeWhileFactory(this, predicate, context));\n    },\n\n    takeUntil: function(predicate, context) {\n      return this.takeWhile(not(predicate), context);\n    },\n\n    valueSeq: function() {\n      return this.toIndexedSeq();\n    },\n\n\n    // ### Hashable Object\n\n    hashCode: function() {\n      return this.__hash || (this.__hash = hashIterable(this));\n    },\n\n\n    // ### Internal\n\n    // abstract __iterate(fn, reverse)\n\n    // abstract __iterator(type, reverse)\n  });\n\n  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\n  var IterablePrototype = Iterable.prototype;\n  IterablePrototype[IS_ITERABLE_SENTINEL] = true;\n  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;\n  IterablePrototype.__toJS = IterablePrototype.toArray;\n  IterablePrototype.__toStringMapper = quoteString;\n  IterablePrototype.inspect =\n  IterablePrototype.toSource = function() { return this.toString(); };\n  IterablePrototype.chain = IterablePrototype.flatMap;\n\n  // Temporary warning about using length\n  (function () {\n    try {\n      Object.defineProperty(IterablePrototype, 'length', {\n        get: function () {\n          if (!Iterable.noLengthWarning) {\n            var stack;\n            try {\n              throw new Error();\n            } catch (error) {\n              stack = error.stack;\n            }\n            if (stack.indexOf('_wrapObject') === -1) {\n              console && console.warn && console.warn(\n                'iterable.length has been deprecated, '+\n                'use iterable.size or iterable.count(). '+\n                'This warning will become a silent error in a future version. ' +\n                stack\n              );\n              return this.size;\n            }\n          }\n        }\n      });\n    } catch (e) {}\n  })();\n\n\n\n  mixin(KeyedIterable, {\n\n    // ### More sequential methods\n\n    flip: function() {\n      return reify(this, flipFactory(this));\n    },\n\n    findKey: function(predicate, context) {\n      var entry = this.findEntry(predicate, context);\n      return entry && entry[0];\n    },\n\n    findLastKey: function(predicate, context) {\n      return this.toSeq().reverse().findKey(predicate, context);\n    },\n\n    keyOf: function(searchValue) {\n      return this.findKey(function(value ) {return is(value, searchValue)});\n    },\n\n    lastKeyOf: function(searchValue) {\n      return this.findLastKey(function(value ) {return is(value, searchValue)});\n    },\n\n    mapEntries: function(mapper, context) {var this$0 = this;\n      var iterations = 0;\n      return reify(this,\n        this.toSeq().map(\n          function(v, k)  {return mapper.call(context, [k, v], iterations++, this$0)}\n        ).fromEntrySeq()\n      );\n    },\n\n    mapKeys: function(mapper, context) {var this$0 = this;\n      return reify(this,\n        this.toSeq().flip().map(\n          function(k, v)  {return mapper.call(context, k, v, this$0)}\n        ).flip()\n      );\n    },\n\n  });\n\n  var KeyedIterablePrototype = KeyedIterable.prototype;\n  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;\n  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;\n  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;\n  KeyedIterablePrototype.__toStringMapper = function(v, k)  {return k + ': ' + quoteString(v)};\n\n\n\n  mixin(IndexedIterable, {\n\n    // ### Conversion to other types\n\n    toKeyedSeq: function() {\n      return new ToKeyedSequence(this, false);\n    },\n\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    filter: function(predicate, context) {\n      return reify(this, filterFactory(this, predicate, context, false));\n    },\n\n    findIndex: function(predicate, context) {\n      var entry = this.findEntry(predicate, context);\n      return entry ? entry[0] : -1;\n    },\n\n    indexOf: function(searchValue) {\n      var key = this.toKeyedSeq().keyOf(searchValue);\n      return key === undefined ? -1 : key;\n    },\n\n    lastIndexOf: function(searchValue) {\n      return this.toSeq().reverse().indexOf(searchValue);\n    },\n\n    reverse: function() {\n      return reify(this, reverseFactory(this, false));\n    },\n\n    slice: function(begin, end) {\n      return reify(this, sliceFactory(this, begin, end, false));\n    },\n\n    splice: function(index, removeNum /*, ...values*/) {\n      var numArgs = arguments.length;\n      removeNum = Math.max(removeNum | 0, 0);\n      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {\n        return this;\n      }\n      index = resolveBegin(index, this.size);\n      var spliced = this.slice(0, index);\n      return reify(\n        this,\n        numArgs === 1 ?\n          spliced :\n          spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))\n      );\n    },\n\n\n    // ### More collection methods\n\n    findLastIndex: function(predicate, context) {\n      var key = this.toKeyedSeq().findLastKey(predicate, context);\n      return key === undefined ? -1 : key;\n    },\n\n    first: function() {\n      return this.get(0);\n    },\n\n    flatten: function(depth) {\n      return reify(this, flattenFactory(this, depth, false));\n    },\n\n    get: function(index, notSetValue) {\n      index = wrapIndex(this, index);\n      return (index < 0 || (this.size === Infinity ||\n          (this.size !== undefined && index > this.size))) ?\n        notSetValue :\n        this.find(function(_, key)  {return key === index}, undefined, notSetValue);\n    },\n\n    has: function(index) {\n      index = wrapIndex(this, index);\n      return index >= 0 && (this.size !== undefined ?\n        this.size === Infinity || index < this.size :\n        this.indexOf(index) !== -1\n      );\n    },\n\n    interpose: function(separator) {\n      return reify(this, interposeFactory(this, separator));\n    },\n\n    interleave: function(/*...iterables*/) {\n      var iterables = [this].concat(arrCopy(arguments));\n      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);\n      var interleaved = zipped.flatten(true);\n      if (zipped.size) {\n        interleaved.size = zipped.size * iterables.length;\n      }\n      return reify(this, interleaved);\n    },\n\n    last: function() {\n      return this.get(-1);\n    },\n\n    skipWhile: function(predicate, context) {\n      return reify(this, skipWhileFactory(this, predicate, context, false));\n    },\n\n    zip: function(/*, ...iterables */) {\n      var iterables = [this].concat(arrCopy(arguments));\n      return reify(this, zipWithFactory(this, defaultZipper, iterables));\n    },\n\n    zipWith: function(zipper/*, ...iterables */) {\n      var iterables = arrCopy(arguments);\n      iterables[0] = this;\n      return reify(this, zipWithFactory(this, zipper, iterables));\n    },\n\n  });\n\n  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;\n  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n\n  mixin(SetIterable, {\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    get: function(value, notSetValue) {\n      return this.has(value) ? value : notSetValue;\n    },\n\n    contains: function(value) {\n      return this.has(value);\n    },\n\n\n    // ### More sequential methods\n\n    keySeq: function() {\n      return this.valueSeq();\n    },\n\n  });\n\n  SetIterable.prototype.has = IterablePrototype.contains;\n\n\n  // Mixin subclasses\n\n  mixin(KeyedSeq, KeyedIterable.prototype);\n  mixin(IndexedSeq, IndexedIterable.prototype);\n  mixin(SetSeq, SetIterable.prototype);\n\n  mixin(KeyedCollection, KeyedIterable.prototype);\n  mixin(IndexedCollection, IndexedIterable.prototype);\n  mixin(SetCollection, SetIterable.prototype);\n\n\n  // #pragma Helper functions\n\n  function keyMapper(v, k) {\n    return k;\n  }\n\n  function entryMapper(v, k) {\n    return [k, v];\n  }\n\n  function not(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    }\n  }\n\n  function neg(predicate) {\n    return function() {\n      return -predicate.apply(this, arguments);\n    }\n  }\n\n  function quoteString(value) {\n    return typeof value === 'string' ? JSON.stringify(value) : value;\n  }\n\n  function defaultZipper() {\n    return arrCopy(arguments);\n  }\n\n  function defaultNegComparator(a, b) {\n    return a < b ? 1 : a > b ? -1 : 0;\n  }\n\n  function hashIterable(iterable) {\n    if (iterable.size === Infinity) {\n      return 0;\n    }\n    var ordered = isOrdered(iterable);\n    var keyed = isKeyed(iterable);\n    var h = ordered ? 1 : 0;\n    var size = iterable.__iterate(\n      keyed ?\n        ordered ?\n          function(v, k)  { h = 31 * h + hashMerge(hash(v), hash(k)) | 0; } :\n          function(v, k)  { h = h + hashMerge(hash(v), hash(k)) | 0; } :\n        ordered ?\n          function(v ) { h = 31 * h + hash(v) | 0; } :\n          function(v ) { h = h + hash(v) | 0; }\n    );\n    return murmurHashOfSize(size, h);\n  }\n\n  function murmurHashOfSize(size, h) {\n    h = src_Math__imul(h, 0xCC9E2D51);\n    h = src_Math__imul(h << 15 | h >>> -15, 0x1B873593);\n    h = src_Math__imul(h << 13 | h >>> -13, 5);\n    h = (h + 0xE6546B64 | 0) ^ size;\n    h = src_Math__imul(h ^ h >>> 16, 0x85EBCA6B);\n    h = src_Math__imul(h ^ h >>> 13, 0xC2B2AE35);\n    h = smi(h ^ h >>> 16);\n    return h;\n  }\n\n  function hashMerge(a, b) {\n    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int\n  }\n\n  var Immutable = {\n\n    Iterable: Iterable,\n\n    Seq: Seq,\n    Collection: Collection,\n    Map: src_Map__Map,\n    OrderedMap: OrderedMap,\n    List: List,\n    Stack: Stack,\n    Set: src_Set__Set,\n    OrderedSet: OrderedSet,\n\n    Record: Record,\n    Range: Range,\n    Repeat: Repeat,\n\n    is: is,\n    fromJS: fromJS,\n\n  };\n\n  return Immutable;\n\n}));\n},{}],6:[function(require,module,exports){\nif (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n},{}],7:[function(require,module,exports){\nvar Immutable = require('immutable');\nvar Cursor = require('immutable/contrib/cursor');\nvar EventEmitter = require('eventemitter3').EventEmitter;\nvar inherits = require('inherits');\nvar utils = require('./utils');\n\n/************************************\n *\n * ## Public API.\n *   Constructor({ history: bool, key: string, data: structure|object })\n *   .cursor(path)\n *   .reference(path)\n *   .forceHasSwapped(newData, oldData, keyPath)\n *   .undo(steps)\n *   .redo(steps)\n *   .undoUntil(structure)\n *\n ************************************/\nfunction Structure (options) {\n  var self = this;\n\n  options = options || {};\n  if (!(this instanceof Structure)) {\n    return new Structure(options);\n  }\n\n  this.key = options.key || utils.generateRandomKey();\n\n  this.current = options.data;\n  if (!isImmutableStructure(this.current) || !this.current) {\n    this.current = Immutable.fromJS(this.current || {});\n  }\n\n  if (!!options.history) {\n    this.history = Immutable.List.of(this.current);\n    this._currentRevision = 0;\n  }\n\n  this._pathListeners = [];\n  this.on('swap', function (newData, oldData, keyPath) {\n    listListenerMatching(self._pathListeners, pathString(keyPath)).forEach(function (fns) {\n      fns.forEach(function (fn) {\n        if (typeof fn !== 'function') return;\n        fn(newData, oldData, keyPath);\n      });\n    });\n  });\n\n  EventEmitter.call(this, arguments);\n}\ninherits(Structure, EventEmitter);\nmodule.exports = Structure;\n\nStructure.prototype.cursor = function (path) {\n  var self = this;\n  path = path || [];\n\n  if (!this.current) {\n    throw new Error('No structure loaded.');\n  }\n\n  var changeListener = function (newRoot, oldRoot, path) {\n    if(self.current === oldRoot) {\n      return self.current = newRoot;\n    }\n    // Othewise an out-of-sync change occured. We ignore `oldRoot`, and focus on\n    // changes at path `path`, and sync this to `self.current`.\n\n    if(!hasIn(newRoot, path)) {\n      return self.current = self.current.removeIn(path);\n    }\n\n    // Update an existing path or add a new path within the current map.\n    return self.current = self.current.setIn(path, newRoot.getIn(path));\n  };\n\n  changeListener = handleHistory(this, changeListener);\n  changeListener = handleSwap(this, changeListener);\n  changeListener = handlePersisting(this, changeListener);\n  return Cursor.from(self.current, path, changeListener);\n};\n\nStructure.prototype.reference = function (path) {\n  if (isCursor(path) && path._keyPath) {\n    path = path._keyPath;\n  }\n  var self = this, pathId = pathString(path);\n  var listenerNs = self._pathListeners[pathId];\n  var cursor = this.cursor(path);\n\n  var changeListener = function (newRoot, oldRoot, changedPath) { cursor = self.cursor(path); };\n  var referenceListeners = [changeListener];\n  this._pathListeners[pathId] = !listenerNs ? referenceListeners : listenerNs.concat(changeListener);\n\n  return {\n    observe: function (eventName, newFn) {\n      if (typeof eventName === 'function') {\n        newFn = eventName;\n        eventName = void 0;\n      }\n      if (this._dead || typeof newFn !== 'function') return;\n      if (eventName && eventName !== 'swap') {\n        newFn = onlyOnEvent(eventName, newFn);\n      }\n\n      self._pathListeners[pathId] = self._pathListeners[pathId].concat(newFn);\n      referenceListeners = referenceListeners.concat(newFn);\n\n      return function unobserve () {\n        var fnIndex = self._pathListeners[pathId].indexOf(newFn);\n        var localListenerIndex = referenceListeners.indexOf(newFn);\n\n        if (referenceListeners[localListenerIndex] === newFn) {\n          referenceListeners.splice(localListenerIndex, 1);\n        }\n\n        if (!self._pathListeners[pathId]) return;\n        if (self._pathListeners[pathId][fnIndex] !== newFn) return;\n        self._pathListeners[pathId].splice(fnIndex, 1);\n      };\n    },\n    cursor: function (subPath) {\n      if (subPath) return cursor.cursor(subPath);\n      return cursor;\n    },\n    unobserveAll: function () {\n      removeAllListenersBut(self, pathId, referenceListeners, changeListener);\n      referenceListeners = [changeListener];\n    },\n    destroy: function () {\n      removeAllListenersBut(self, pathId, referenceListeners);\n      referenceListeners = void 0;\n      cursor = void 0;\n\n      this._dead = true;\n      this.observe = void 0;\n      this.unobserveAll = void 0;\n      this.cursor = void 0;\n      this.destroy = void 0;\n    }\n  };\n};\n\nStructure.prototype.forceHasSwapped = function (newData, oldData, keyPath) {\n  this.emit('swap', newData || this.current, oldData, keyPath);\n  possiblyEmitAnimationFrameEvent(this, newData || this.current, oldData, keyPath)\n};\n\nStructure.prototype.undo = function(back) {\n  this._currentRevision -= back || 1;\n  if (this._currentRevision < 0) {\n    this._currentRevision = 0;\n  }\n\n  this.current = this.history.get(this._currentRevision);\n  return this.current;\n};\n\nStructure.prototype.redo = function(head) {\n  this._currentRevision += head || 1;\n  if (this._currentRevision > this.history.count() - 1) {\n    this._currentRevision = this.history.count() - 1;\n  }\n\n  this.current = this.history.get(this._currentRevision);\n  return this.current;\n};\n\nStructure.prototype.undoUntil = function(structure) {\n  this._currentRevision = this.history.indexOf(structure);\n  this.current = structure;\n\n  return structure;\n};\n\n\n/************************************\n * Private decorators.\n ***********************************/\n\n// Update history if history is active\nfunction handleHistory (emitter, fn) {\n  return function (newData, oldData, path) {\n    var newStructure = fn.apply(fn, arguments);\n    if (!emitter.history || (newData === oldData)) return newStructure;\n\n    emitter.history = emitter.history\n      .take(++emitter._currentRevision)\n      .push(emitter.current);\n\n    return newStructure;\n  };\n}\n\n// Update history if history is active\nvar possiblyEmitAnimationFrameEvent = (function () {\n  var queuedChange = false;\n  if (typeof requestAnimationFrame !== 'function') {\n    return function () {};\n  }\n\n  return function requestAnimationFrameEmitter (emitter, newStructure, oldData) {\n    if (queuedChange) return;\n    queuedChange = true;\n\n    requestAnimationFrame(function () {\n      queuedChange = false;\n      emitter.emit('next-animation-frame', newStructure, oldData);\n    });\n  };\n}());\n\n// Emit swap event on values are swapped\nfunction handleSwap (emitter, fn) {\n  return function (newData, oldData, keyPath) {\n    var newStructure = fn.apply(fn, arguments);\n    if(newData === oldData) return newStructure;\n\n    emitter.emit('swap', newStructure, oldData, keyPath);\n    possiblyEmitAnimationFrameEvent(emitter, newStructure, oldData, keyPath);\n\n    return newStructure;\n  };\n}\n\n// Map changes to update events (delete/change/add).\nfunction handlePersisting (emitter, fn) {\n  return function (newData, oldData, path) {\n    var newStructure = fn.apply(fn, arguments);\n    if(newData === oldData) return newStructure;\n    var info = analyze(newData, oldData, path);\n\n    if (info.eventName) {\n      emitter.emit.apply(emitter, [info.eventName].concat(info.arguments));\n    }\n    return newStructure;\n  };\n}\n\n/************************************\n * Private helpers.\n ***********************************/\n\nfunction removeAllListenersBut(self, pathId, listeners, except) {\n  if (!listeners) return;\n  listeners.forEach(function (fn) {\n    if (except && fn === except) return;\n    var index = self._pathListeners[pathId].indexOf(fn);\n    self._pathListeners[pathId].splice(index, 1);\n  });\n}\n\nfunction analyze (newData, oldData, path) {\n  var oldObject = oldData && oldData.getIn(path);\n  var newObject = newData && newData.getIn(path);\n\n  var inOld = oldData && hasIn(oldData, path);\n  var inNew = newData && hasIn(newData, path);\n\n  var arguments, eventName;\n\n  if (inOld && !inNew) {\n    eventName = 'delete';\n    arguments = [path, oldObject];\n  } else if (inOld && inNew) {\n    eventName = 'change';\n    arguments = [path, newObject, oldObject];\n  } else if (!inOld && inNew) {\n    eventName = 'add';\n    arguments = [path, newObject];\n  }\n\n  return {\n    eventName: eventName,\n    arguments: arguments\n  };\n}\n\n\n// Check if path exists.\nvar NOT_SET = {};\nfunction hasIn(cursor, path) {\n  if(cursor.hasIn) return cursor.hasIn(path);\n  return cursor.getIn(path, NOT_SET) !== NOT_SET;\n}\n\nfunction pathString(path) {\n  var topLevel = 'global';\n  if (!path || !path.length) return topLevel;\n  return [topLevel].concat(path).join('|');\n}\n\nfunction listListenerMatching (listeners, basePath) {\n  var newListeners = [];\n  for (var key in listeners) {\n    if (!listeners.hasOwnProperty(key)) return;\n    if (basePath.indexOf(key) !== 0) continue;\n    newListeners.push(listeners[key]);\n  }\n\n  return newListeners;\n}\n\nfunction onlyOnEvent(eventName, fn) {\n  return function (newData, oldData, keyPath) {\n    var info = analyze(newData, oldData, keyPath);\n    if (info.eventName !== eventName) return;\n    return fn(newData, oldData, keyPath);\n  };\n}\n\nfunction isCursor (potential) {\n  return potential && typeof potential.deref === 'function';\n}\n\n// Check if passed structure is existing immutable structure.\n// From https://github.com/facebook/immutable-js/wiki/Upgrading-to-Immutable-v3#additional-changes\nfunction isImmutableStructure (data) {\n  return immutableSafeCheck('Iterable', 'isIterable', data) ||\n          immutableSafeCheck('Seq', 'isSeq', data) ||\n          immutableSafeCheck('Map', 'isMap', data) ||\n          immutableSafeCheck('OrderedMap', 'isOrderedMap', data) ||\n          immutableSafeCheck('List', 'isList', data) ||\n          immutableSafeCheck('Stack', 'isStack', data) ||\n          immutableSafeCheck('Set', 'isSet', data);\n}\n\nfunction immutableSafeCheck (ns, method, data) {\n  return Immutable[ns] && Immutable[ns][method] && Immutable[ns][method](data);\n}\n\n},{\"./utils\":8,\"eventemitter3\":3,\"immutable\":5,\"immutable/contrib/cursor\":4,\"inherits\":6}],8:[function(require,module,exports){\n\n\nmodule.exports.generateRandomKey = function (len) {\n  len = len || 10;\n  return Math.random().toString(36).substring(2).substring(0, len);\n};\n\n},{}],9:[function(require,module,exports){\n'use strict';\n\nvar React = (window.React);\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\n  propTypes: {\n    path: React.PropTypes.string,\n    fill: React.PropTypes.string\n  },\n\n  getDefaultProps:function() {\n    return {\n      fill: '#3182bd'\n    };\n  },\n\n  render:function() {\n\n    return (\n      React.createElement(\"path\", {\n        className: \"rd3-areachart-area\", \n        d: this.props.path, \n        fill: this.props.fill}\n      )\n    );\n  }\n\n});\n\n\n},{}],10:[function(require,module,exports){\n'use strict';\n\nvar React = (window.React);\nvar d3 = (window.d3);\nvar DataSeries = require('./DataSeries');\nvar common = require('../common');\nvar Chart = common.Chart;\nvar XAxis = common.XAxis;\nvar YAxis = common.YAxis;\nvar mixins = require('../mixins');\nvar CartesianChartPropsMixin = mixins.CartesianChartPropsMixin;\n\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\n  mixins: [ CartesianChartPropsMixin ],\n\n  propTypes: {\n    margins: React.PropTypes.object\n },\n\n  getDefaultProps:function() {\n    return {\n      margins: {top: 10, right: 20, bottom: 40, left: 45},\n      yAxisTickCount: 4,\n      className: 'rd3-areachart'\n    };\n  },\n\n  render:function() {\n\n    var props = this.props;\n\n    // Calculate inner chart dimensions\n    var innerWidth, innerHeight;\n    innerWidth = props.width - props.margins.left - props.margins.right;\n    innerHeight = props.height - props.margins.top - props.margins.bottom;\n\n    if (props.legend) {\n      innerWidth = innerWidth - props.legendOffset;\n    }\n\n    if (!Array.isArray(props.data)) {\n      props.data = [props.data];\n    }\n\n    var yScale = d3.scale.linear()\n      .range([innerHeight, 0]);\n\n    var xValues = [];\n    var yValues = [];\n    var seriesNames = [];\n    props.data.forEach( function(series)  {\n      seriesNames.push(series.name);\n      series.values.forEach(function(val, idx)  {\n        xValues.push(props.xAccessor(val));\n        yValues.push(props.yAccessor(val));\n      });\n    });\n\n    var xScale;\n    if (xValues.length > 0 && Object.prototype.toString.call(xValues[0]) === '[object Date]' && props.xAxisTickInterval) {\n      xScale = d3.time.scale()\n        .range([0, innerWidth]);\n    } else {\n      xScale = d3.scale.linear()\n        .range([0, innerWidth]);\n    }\n\n    xScale.domain(d3.extent(xValues));\n    yScale.domain(d3.extent(yValues));\n\n    props.colors.domain(seriesNames);\n\n    var stack = d3.layout.stack()\n      .x(props.xAccessor)\n      .y(props.yAccessor)\n      .offset('expand')\n      .order('reverse')\n      .values(function(d) { return d.values; });\n\n    var layers = stack(props.data);\n\n    var trans = (\"translate(\" +  props.margins.left + \",\" +  props.margins.top + \")\");\n\n    var dataSeries = layers.map( function(d, idx)  {\n      return (\n          React.createElement(DataSeries, {\n            key: idx, \n            name: d.name, \n            colors: props.colors, \n            index: idx, \n            xScale: xScale, \n            yScale: yScale, \n            data: d.values, \n            xAccessor: props.xAccessor, \n            yAccessor: props.yAccessor}\n          )\n        );\n      });\n\n    return (\n      React.createElement(Chart, {\n        viewBox: props.viewBox, \n        legend: props.legend, \n        data: props.data, \n        margins: props.margins, \n        colors: props.colors, \n        width: props.width, \n        height: props.height, \n        title: props.title\n      }, \n        React.createElement(\"g\", {transform: trans, className: props.className}, \n          dataSeries, \n          React.createElement(XAxis, {\n            xAxisClassName: \"rd3-areachart-xaxis\", \n            xScale: xScale, \n            xAxisTickInterval: props.xAxisTickInterval, \n            xAxisTickCount: props.xAxisTickCount, \n            xAxisLabel: props.xAxisLabel, \n            xAxisLabelOffset: props.xAxisLabelOffset, \n            xOrient: props.xOrient, \n            margins: props.margins, \n            width: innerWidth, \n            height: innerHeight}\n          ), \n          React.createElement(YAxis, {\n            yAxisClassName: \"rd3-areachart-yaxis\", \n            yScale: yScale, \n            yAxisTickInterval: props.yAxisTickInterval, \n            yAxisTickCount: props.yAxisTickCount, \n            yAxisLabel: props.yAxisLabel, \n            yAxisLabelOffset: props.yAxisLabelOffset, \n            yOrient: props.yOrient, \n            margins: props.margins, \n            width: innerWidth, \n            height: props.height}\n          )\n        )\n      )\n    );\n  }\n\n});\n\n\n},{\"../common\":34,\"../mixins\":41,\"./DataSeries\":11}],11:[function(require,module,exports){\n'use strict';\n\nvar React = (window.React);\nvar d3 = (window.d3);\nvar Area = require('./Area');\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\n  render:function() {\n\n    var props = this.props;\n\n    var area = d3.svg.area()\n      .x(function(d) { return props.xScale(props.xAccessor(d)); })\n      .y0(function(d) { return props.yScale(d.y0); })\n      .y1(function(d) { return props.yScale(d.y0 + props.yAccessor(d)); });\n\n    var path = area(props.data);\n\n    return (\n      React.createElement(Area, {fill: props.colors(props.name), path: path})\n    );\n  }\n\n});\n\n\n},{\"./Area\":9}],12:[function(require,module,exports){\n\nexports.AreaChart = require('./AreaChart');\n\n\n},{\"./AreaChart\":10}],13:[function(require,module,exports){\n'use strict';\n\nvar React = (window.React);\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\n  propTypes: {\n    fill: React.PropTypes.string,\n    width: React.PropTypes.number,\n    height: React.PropTypes.number,\n    offset: React.PropTypes.number\n  },\n\n  getDefaultProps:function() {\n    return {\n      offset: 0\n    };\n  },\n\n  render:function() {\n    return (\n      React.createElement(\"rect\", {\n        fill: this.props.fill, \n        width: this.props.width, \n        height: this.props.height, \n        x: this.props.offset, \n        y: this.props.availableHeight  - this.props.height, \n        className: \"rd3-barchart-bar\"}\n      )\n    );\n  }\n});\n\n\n},{}],14:[function(require,module,exports){\n'use strict';\n\nvar React = (window.React);\nvar d3 = (window.d3);\nvar DataSeries = require('./DataSeries');\nvar common = require('../common');\nvar Chart = common.Chart;\nvar XAxis = common.XAxis;\nvar YAxis = common.YAxis;\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\n  propTypes: {\n    data: React.PropTypes.array,\n    yAxisTickCount: React.PropTypes.number,\n    width: React.PropTypes.number,\n    margins: React.PropTypes.object,\n    height: React.PropTypes.number,\n    fill: React.PropTypes.string,\n    title: React.PropTypes.string,\n    yScale : React.PropTypes.func,\n    xScale : React.PropTypes.func,\n    yAxisTickFormat : React.PropTypes.func\n  },\n\n  getDefaultProps:function() {\n    return {\n      data: [],\n      yAxisTickCount: 4,\n      width: 500,\n      height: 200,\n      margins: {top: 20, right: 30, bottom: 30, left: 30},\n      fill: \"#3182bd\",\n      title: '',\n      yScale : null,\n      xScale : null\n    };\n  },\n\n  render:function() {\n\n    var props = this.props;\n\n    var values = props.data.map( function(item)  {return item.value;} );\n\n    var labels = props.data.map( function(item)  {return item.label;} );\n\n    var margins = props.margins;\n\n    var sideMargins = margins.left + margins.right;\n    var topBottomMargins = margins.top + margins.bottom;\n\n    var yScale = this.props.yScale;\n    if (!yScale) {\n      yScale = d3.scale.linear()\n      .domain([d3.min([d3.min(values), 0]), d3.max(values)])\n      .range([props.height - topBottomMargins, 0]);\n    }\n\n    var xScale = this.props.xScale;\n    if (!xScale) {\n      xScale = d3.scale.ordinal()\n        .domain(labels)\n        .rangeRoundBands([0, props.width - sideMargins], 0.1);\n    }\n    var trans = (\"translate(\" +  margins.left + \",\" +  margins.top + \")\");\n\n    return (\n      React.createElement(Chart, {width: props.width, height: props.height, title: props.title}, \n        React.createElement(\"g\", {transform: trans, className: \"rd3-barchart\"}, \n          React.createElement(DataSeries, {\n            values: values, \n            yScale: yScale, \n            xScale: yScale, \n            margins: margins, \n            data: props.data, \n            width: props.width - sideMargins, \n            height: props.height - topBottomMargins, \n            fill: props.fill}\n          ), \n          React.createElement(YAxis, {\n            yAxisClassName: \"rd3-barchart-yaxis\", \n            yScale: yScale, \n            margins: margins, \n            yAxisTickCount: props.yAxisTickCount, \n            tickFormat: props.yAxisTickFormat, \n            width: props.width - sideMargins, \n            height: props.height - topBottomMargins}\n          ), \n          React.createElement(XAxis, {\n            xAxisClassName: \"rd3-barchart-xaxis\", \n            xScale: xScale, \n            data: props.data, \n            margins: margins, \n            width: props.width - sideMargins, \n            height: props.height - topBottomMargins}\n          )\n        )\n      )\n    );\n  }\n\n});\n\n\n},{\"../common\":34,\"./DataSeries\":15}],15:[function(require,module,exports){\n'use strict';\n\nvar React = (window.React);\nvar d3 = (window.d3);\nvar Bar = require('./Bar');\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\n  propTypes: {\n    fill: React.PropTypes.string,\n    title: React.PropTypes.string,\n    padding: React.PropTypes.number,\n    width: React.PropTypes.number,\n    height: React.PropTypes.number,\n    offset: React.PropTypes.number\n  },\n\n  getDefaultProps:function() {\n    return {\n      padding: 0.1,\n      data: []\n    };\n  },\n\n  render:function() {\n\n    var props = this.props;\n\n    var xScale = d3.scale.ordinal()\n      .domain(d3.range(props.values.length))\n      .rangeRoundBands([0, props.width], props.padding);\n\n    var bars = props.values.map(function(point, i) {\n      return (\n        React.createElement(Bar, {\n          height: props.yScale(0) - props.yScale(point), \n          width: xScale.rangeBand(), \n          offset: xScale(i), \n          availableHeight: props.height, \n          fill: props.fill, key: i}\n        )\n      );\n    });\n\n    return (\n      React.createElement(\"g\", null, bars)\n    );\n  }\n});\n\n\n},{\"./Bar\":13}],16:[function(require,module,exports){\n\nexports.BarChart = require('./BarChart');\n\n\n},{\"./BarChart\":14}],17:[function(require,module,exports){\n'use strict';\n\nvar React = (window.React);\nvar utils = require('../utils');\n\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\n  getInitialState:function() {\n    // state for animation usage\n    return {\n      candleWidth: this.props.width,\n      candleFill: this.props.fill\n    };\n  },\n\n  getDefaultProps:function() {\n    return {\n      stroke: '#000',\n      strokeWidth: 1,\n      shapeRendering: 'crispEdges',\n      className: 'rd3-candlestick-candle'\n    };\n  },\n\n  componentDidMount:function() {\n    var props = this.props;\n    // The circle reference is observed when both it is set to\n    // active, and to inactive, so we have to check which one\n    props.voronoiRef.observe(function()  {\n      var candleStatus = props.voronoiRef.cursor().deref();\n      if (candleStatus === 'active') {\n        this._animateCandle(props.id);\n      } else if (candleStatus === 'inactive') {\n        this._restoreCandle(props.id);\n      }\n    }.bind(this));\n  },\n\n  componentWillUnmount:function() {\n    this.props.voronoiRef.destroy();\n  },\n\n\n  _animateCandle:function(id) {\n    this.setState({ \n      candleWidth: this.props.width * 1.5,\n      candleFill: utils.shade(this.props.fill, -0.2)\n    });\n  },\n\n  _restoreCandle:function(id) {\n    this.setState({ \n      candleWidth: this.props.width,\n      candleFill: this.props.fill\n    });\n  },\n\n  render:function() {\n    return (\n      React.createElement(\"rect\", {\n        className: this.props.className, \n        fill: this.state.candleFill, \n        x: this.props.x - ((this.state.candleWidth - this.props.width) / 2), \n        y: this.props.y, \n        stroke: this.props.stroke, \n        strokeWidth: this.props.strokeWidth, \n        style: { shapeRendering: this.props.shapeRendering}, \n        width: this.state.candleWidth, \n        height: this.props.height}\n      )\n    );\n  }\n\n});\n\n\n},{\"../utils\":54}],18:[function(require,module,exports){\n'use strict';\n\nvar React = (window.React);\nvar d3 = (window.d3);\nvar immstruct = require('immstruct');\nvar utils = require('../utils');\nvar DataSeries = require('./DataSeries');\nvar common = require('../common');\nvar Chart = common.Chart;\nvar XAxis = common.XAxis;\nvar YAxis = common.YAxis;\nvar Voronoi = common.Voronoi;\n\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\n  propTypes: {\n    data: React.PropTypes.oneOfType([\n      React.PropTypes.array,\n      React.PropTypes.object\n    ]),\n    yAxisTickCount: React.PropTypes.number,\n    yAxisFormatter: React.PropTypes.func,\n    yAccessor: React.PropTypes.func,\n    xAxisTickInterval: React.PropTypes.object,\n    xAxisFormatter: React.PropTypes.func,\n    xAccessor: React.PropTypes.func,\n    fillUp: React.PropTypes.func,\n    fillDown: React.PropTypes.func,\n    width: React.PropTypes.number,\n    height: React.PropTypes.number,\n    title: React.PropTypes.string,\n  },\n\n  getDefaultProps:function() {\n    return {\n      data: [],\n      fillUp: function(i)  {return 'white';},\n      fillDown: d3.scale.category20c(),\n      margins: {top: 10, right: 20, bottom: 30, left: 45},\n      legendOffset: 120,\n      width: 400,\n      height: 200,\n      title: '',\n      xAccessor: function(d)  {return d.x;},\n      yAccessor: function(d)  {return { open: d.open, high: d.high, low: d.low, close: d.close };}\n    };\n  },\n\n  render:function() {\n\n    var structure = immstruct('candlestickChart', { voronoi: {} });\n\n    var props = this.props;\n\n    // Calculate inner chart dimensions\n    var innerWidth, innerHeight;\n    innerWidth = props.width - props.margins.left - props.margins.right;\n    innerHeight = props.height - props.margins.top - props.margins.bottom;\n\n    if (props.legend) {\n      innerWidth = innerWidth - props.legendOffset;\n    }\n\n    if (!Array.isArray(props.data)) {\n      props.data = [props.data];\n    }\n\n    var flattenedData = utils.flattenData(props.data, props.xAccessor, props.yAccessor);\n\n    var allValues = flattenedData.allValues,\n        xValues = flattenedData.xValues,\n        yValues = flattenedData.yValues;\n\n\n    var scales = utils.calculateScales(innerWidth, innerHeight, xValues, yValues);\n\n    var trans = (\"translate(\" + ( props.yAxisOffset < 0 ? props.margins.left + Math.abs(props.yAxisOffset) : props.margins.left) + \",\" +  props.margins.top + \")\");\n\n    var dataSeries = props.data.map( function(series, idx)  {\n      return (\n          React.createElement(DataSeries, {\n            structure: structure, \n            series: series, \n            key: idx, \n            name: series.name, \n            colors: props.colors, \n            index: idx, \n            xScale: scales.xScale, \n            yScale: scales.yScale, \n            data: series.values, \n            fillUp: this.props.fillUp(idx), \n            fillDown: this.props.fillDown(idx), \n            xAccessor: props.xAccessor, \n            yAccessor: props.yAccessor}\n          )\n        );\n      }.bind(this));\n\n    return (\n      React.createElement(Chart, {\n        viewBox: props.viewBox, \n        width: this.props.width, \n        height: this.props.height, \n        margins: this.props.margins, \n        title: this.props.title\n      }, \n        React.createElement(\"g\", {transform: trans, className: \"rd3-candlestick\"}, \n          dataSeries, \n          React.createElement(Voronoi, {\n            structure: structure, \n            data: allValues, \n            xScale: scales.xScale, \n            yScale: scales.yScale, \n            width: innerWidth, \n            height: innerHeight}\n          ), \n          React.createElement(XAxis, {\n            xAxisClassName: \"rd3-candlestick-xaxis\", \n            xScale: scales.xScale, \n            xAxisTickInterval: props.xAxisTickInterval, \n            xAxisOffset: props.xAxisOffset, \n            xAxisFormatter: props.xAxisFormatter, \n            xAxisLabel: props.xAxisLabel, \n            xAxisLabelOffset: props.xAxisLabelOffset, \n            xOrient: props.xOrient, \n            margins: props.margins, \n            width: innerWidth, \n            height: innerHeight}\n          ), \n          React.createElement(YAxis, {\n            yAxisClassName: \"rd3-candlestick-yaxis\", \n            yScale: scales.yScale, \n            yAxisOffset: props.yAxisOffset, \n            yAxisTickCount: props.yAxisTickCount, \n            yAxisFormatter: props.yAxisFormatter, \n            yAxisLabel: props.yAxisLabel, \n            yAxisLabelOffset: props.yAxisLabelOffset, \n            yOrient: props.yOrient, \n            margins: props.margins, \n            width: innerWidth, \n            height: props.height}\n          )\n        )\n      )\n    );\n  }\n\n});\n\n\n},{\"../common\":34,\"../utils\":54,\"./DataSeries\":19,\"immstruct\":2}],19:[function(require,module,exports){\n'use strict';\n\nvar React = (window.React);\nvar d3 = (window.d3);\nvar utils = require('../utils');\nvar Candle = require('./Candle');\nvar Wick = require('./Wick');\n\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\n  propTypes: {\n    fillUp: React.PropTypes.string.isRequired,\n    fillDown: React.PropTypes.string.isRequired\n  },\n\n  render:function() {\n\n    var props = this.props;\n\n    var xRange = this.props.xScale.range(),\n        width = Math.abs(xRange[0] - xRange[1]),\n        candleWidth = (width / (this.props.data.length + 2)) * 0.5;\n\n    var dataSeries = this.props.data\n        .map(function(d, idx) {\n          // Candles\n          var ohlc = this.props.yAccessor(d),\n            x = this.props.xScale(this.props.xAccessor(d)) - 0.5 * candleWidth,\n            y = this.props.yScale(Math.max(ohlc.open, ohlc.close)),\n            height = Math.abs(this.props.yScale(ohlc.open) - this.props.yScale(ohlc.close)),\n            y2 = this.props.yScale(ohlc.low),\n            ohlcClass = (ohlc.open <= ohlc.close) ? 'up' : 'down',\n            className = ( ohlcClass + \" rd3-candlestick-rect\"),\n            fill = (ohlc.open <= ohlc.close) ? this.props.fillUp : this.props.fillDown;\n\n          //Wicks\n          var x1 = this.props.xScale(this.props.xAccessor(d)),\n            y1 = this.props.yScale(ohlc.high),\n            x2 = x1;\n\n          // Create unique id: series + index\n          var id = props.series.name + '-' + idx;\n\n          // Create an immstruct reference for the candle id\n          // and set it to 'inactive'\n          props.structure.cursor('voronoi').set(id, 'inactive');\n\n          // Having set the Voronoi circle id cursor to 'inactive'\n          // We now pass on the Voronoi circle id reference to the \n          // circle component, where it will be observed and dereferenced\n          var voronoiRef = props.structure.reference(['voronoi', id]);\n\n\n          return (\n            React.createElement(\"g\", {key: idx}, \n              React.createElement(Wick, {\n                x1: x1, \n                x2: x2, \n                y1: y1, \n                y2: y2}\n              ), \n              React.createElement(Candle, {\n                voronoiRef: voronoiRef, \n                fill: fill, \n                id: id, \n                x: x, \n                y: y, \n                width: candleWidth, \n                height: height}\n              )\n            )\n          );\n        }.bind(this), this);\n\n    return (\n      React.createElement(\"g\", null, \n        dataSeries\n      )\n    );\n  }\n\n});\n\n\n},{\"../utils\":54,\"./Candle\":17,\"./Wick\":20}],20:[function(require,module,exports){\n'use strict';\n\nvar React = (window.React);\n\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\n  propTypes: {\n    strokeWidth: React.PropTypes.number,\n    stroke: React.PropTypes.string\n  },\n\n  getDefaultProps:function() {\n    return {\n      className: 'rd3-candlestick-wick',\n      stroke: '#000',\n      strokeWidth: 1,\n      shapeRendering: \"crispEdges\"\n    };\n  },\n\n  render:function() {\n    var props = this.props;\n    return React.createElement(\"line\", {\n            stroke: props.stroke, \n            strokeWidth: props.strokeWidth, \n            style: { shapeRendering: props.shapeRendering}, \n            className: props.className, \n            x1: props.x1, \n            y1: props.y1, \n            x2: props.x2, \n            y2: props.y2}\n          );\n  }\n\n});\n\n\n},{}],21:[function(require,module,exports){\n\nexports.CandlestickChart = require('./CandlestickChart');\n\n\n},{\"./CandlestickChart\":18}],22:[function(require,module,exports){\n'use strict';\n\nvar React = (window.React);\nvar d3 = (window.d3);\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\n  propTypes: {\n    width: React.PropTypes.number,\n    height: React.PropTypes.number,\n    margins: React.PropTypes.object,\n    text: React.PropTypes.string,\n    colors: React.PropTypes.func\n  },\n\n  getDefaultProps: function() {\n    return {\n      text: \"#000\",\n      colors: d3.scale.category20c()\n    };\n  },\n\n  render: function() {\n\n    var props = this.props;\n\n    var textStyle = {\n      'color': 'black',\n      'fontSize': '50%',\n      'verticalAlign': 'top'\n    };\n\n    var legendItems = [];\n\n    props.data.forEach( function(series, idx)  {\n\n      var itemStyle = {\n        'color': props.colors(idx),\n        'lineHeight': '60%',\n        'fontSize': '200%'\n      };\n\n      legendItems.push(\n            React.createElement(\"li\", {style: itemStyle, key: idx}, \n              React.createElement(\"span\", {style: textStyle}, series.name)\n            )\n          );\n\n    });\n\n    // In preparation for legend positioning\n    var legendFloat = 'right';\n\n    var topMargin = props.margins.top;\n\n    var legendBlockStyle = {\n      'wordWrap': 'break-word',\n      'width': props.sideOffset,\n      'paddingLeft': '0',\n      'marginBottom': '0',\n      'marginTop': topMargin,\n      'float': legendFloat\n    };\n\n    return React.createElement(\"ul\", {style: legendBlockStyle}, legendItems);\n  }\n\n});\n\n\n\n},{}],23:[function(require,module,exports){\n'use strict';\n\nvar React = (window.React);\nvar d3 = (window.d3);\n\nvar Polygon = React.createClass({displayName: \"Polygon\",\n\n  _animateCircle: function() {\n    this.props.structure.cursor('voronoi').cursor(this.props.id).update(function(){return 'active';});\n    // this.props.pubsub.emit('animate', this.props.id);\n  },\n\n  _restoreCircle: function() {\n    this.props.structure.cursor('voronoi').cursor(this.props.id).update(function(){return 'inactive';});\n    // this.props.pubsub.emit('restore', this.props.id);\n  },\n\n  _drawPath: function(d) {\n    if(d === undefined) {\n      return; \n    }  \n    return 'M' + d.join(',') + 'Z';\n  },\n\n  render: function() {\n    return React.createElement(\"path\", {\n      onMouseOver: this._animateCircle, \n      onMouseOut: this._restoreCircle, \n      fill: \"white\", \n      opacity: \"0\", \n      d: this._drawPath(this.props.vnode)});\n  }\n\n});\n\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\n  render: function() {\n    var xScale = this.props.xScale;\n    var yScale = this.props.yScale;\n\n    var voronoi = d3.geom.voronoi()\n      .x(function(d){ return xScale(d.coord.x); })\n      .y(function(d){ return yScale(d.coord.y); })\n      .clipExtent([[0, 0], [ this.props.width , this.props.height]]);\n\n    var regions = voronoi(this.props.data).map(function(vnode, idx) {\n      return React.createElement(Polygon, {structure: this.props.structure, key: idx, id: vnode.point.id, vnode: vnode});\n    }.bind(this));\n\n    return (\n      React.createElement(\"g\", null, \n        regions\n      )\n    );\n  }\n\n});\n\n\n},{}],24:[function(require,module,exports){\n'use strict';\n\nvar React = (window.React);\nvar d3 = (window.d3);\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\n  propTypes: {\n    scale: React.PropTypes.func.isRequired,\n    innerTickSize: React.PropTypes.number,\n    outerTickSize: React.PropTypes.number,\n    tickPadding: React.PropTypes.number,\n    tickArguments: React.PropTypes.array,\n    fill: React.PropTypes.string,\n    stroke: React.PropTypes.string\n  },\n\n  getDefaultProps:function() {\n    return {\n      innerTickSize: 6,\n      outerTickSize: 6,\n      tickPadding: 3,\n      tickArguments: [10],\n      tickValues: null,\n      tickFormat: null \n    };\n  },\n\n\n  _d3_scaleExtent:function(domain) {\n    var start = domain[0], stop = domain[domain.length - 1];\n    return start < stop ? [start, stop] : [stop, start];\n  },\n\n  _d3_scaleRange:function(scale) {\n    return scale.rangeExtent ? scale.rangeExtent() : this._d3_scaleExtent(scale.range());\n  },\n\n  render:function() {\n\n    var props = this.props;\n    var sign = props.orient === \"top\" || props.orient === \"left\" ? -1 : 1;\n\n    var range = this._d3_scaleRange(props.scale);\n\n    var d;\n\n    if (props.orient === \"bottom\" || props.orient === \"top\") {\n      d = \"M\" + range[0] + \",\" + sign * props.outerTickSize + \"V0H\" + range[1] + \"V\" + sign * props.outerTickSize;\n    } else {\n      d = \"M\" + sign * props.outerTickSize + \",\" + range[0] + \"H0V\" + range[1] + \"H\" + sign * props.outerTickSize;\n    }\n\n\n    return (\n      React.createElement(\"path\", {\n        className: \"domain\", \n        d: d, \n        style: {'shapeRendering':'crispEdges'}, \n        fill: \"none\", \n        stroke: props.stroke, \n        strokeWidth: props.strokeWidth\n      }\n      )\n    );\n  }\n});\n\n\n},{}],25:[function(require,module,exports){\n'use strict';\n\nvar React = (window.React);\nvar d3 = (window.d3);\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\n  getDefaultProps:function() {\n    return {\n      innerTickSize: 6,\n      outerTickSize: 6,\n      tickPadding: 3,\n      tickArguments: [10],\n      tickValues: null,\n      d3_identity: function(d){return d;},\n      tickFormatting: function(d){return d;},\n      tickFormat: null\n    };\n  },\n\n  render:function() {\n    var props = this.props;\n\n    var tr,\n        ticks,\n        scale,\n        adjustedScale,\n        textAnchor,\n        tickFormat,\n        y1, y2, dy, x1, x2, dx;\n\n    var sign = props.yScale ? -1 : 1;\n    var tickSpacing = Math.max(props.innerTickSize, 0) + props.tickPadding;  \n\n    scale = props.yScale ? props.yScale : props.xScale;\n\n    ticks = props.tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, props.tickArguments) : scale.domain()) : props.tickValues;\n    tickFormat = props.tickFormat == null ? (scale.tickFormat ? scale.tickFormat.apply(scale, props.tickArguments) : props.d3_identity) : props.tickFormat;\n\n    adjustedScale = scale.rangeBand ? function(d)  { return scale(d) + scale.rangeBand() / 2; } : scale;\n\n    // Still working on this\n    // Ticks and lines are not fully aligned\n    // in some orientations\n    switch (props.orient) {\n      case 'top':\n        tr = function(tick)  {return (\"translate(\" + adjustedScale(tick) + \",0)\");};\n        textAnchor = \"middle\";\n        y2 = props.innerTickSize * sign;\n        y1 = tickSpacing * sign;\n        dy =  sign < 0 ? \"0em\" : \".71em\";\n        break;\n      case 'bottom':\n        tr = function(tick)  {return (\"translate(\" + adjustedScale(tick) + \",0)\");};\n        textAnchor = \"middle\";\n        y2 = props.innerTickSize * sign;\n        y1 = tickSpacing * sign;\n        dy =  sign < 0 ? \"0em\" : \".71em\";\n        break;\n      case 'left':\n        tr = function(tick)  {return (\"translate(0,\" + adjustedScale(tick) + \")\");};\n        textAnchor = \"end\";\n        x2 = props.innerTickSize * sign;\n        x1 = tickSpacing * sign;\n        dy = \".32em\";\n        break;\n      case 'right':\n        tr = function(tick)  {return (\"translate(0,\" + adjustedScale(tick) + \")\");};\n        textAnchor = \"end\";\n        x2 = props.innerTickSize;\n        x1 = tickSpacing * sign;\n        dy = \".32em\";\n        break;\n    }\n\n    return (\n      React.createElement(\"g\", null, \n        ticks.map( function(tick, i)  {\n          return (\n            React.createElement(\"g\", {key: i, className: \"tick\", transform: tr(tick)}, \n              React.createElement(\"line\", {style: {shapeRendering:'crispEdges',opacity:'1',stroke:'#000'}, x2: x2, y2: y2}\n              ), \n              React.createElement(\"text\", {\n                strokeWidth: \"0.01\", \n                dy: dy, x: x1, y: y1, \n                stroke: \"#000\", \n                textAnchor: textAnchor\n              }, \n                tickFormat(tick)\n              )\n            )\n          );\n          })\n        \n      )\n    );\n  }\n\n});\n\n\n},{}],26:[function(require,module,exports){\n'use strict';\n\nvar React = (window.React);\n\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\n  render:function() {\n    var props = this.props;\n    var strokeWidth = '0.01';\n    if (props.label) {\n      switch (props.orient) {\n        case 'top':\n          return (\n            React.createElement(\"text\", {\n              strokeWidth: strokeWidth, \n              y: props.offset, x: props.width/2, \n              textAnchor: \"middle\"}, \n              props.label\n            )\n          );\n        case 'bottom':\n          return (\n            React.createElement(\"text\", {\n              strokeWidth: strokeWidth, \n              y: props.offset, x: props.width/2, \n              textAnchor: \"middle\"}, \n              props.label\n            )\n          );\n        case 'left':\n          return (\n            React.createElement(\"text\", {\n              strokeWidth: strokeWidth, \n              y: -props.offset, x: -props.height/2, \n              textAnchor: \"middle\", \n              transform: \"rotate(270)\"}, \n              props.label\n            )\n          );\n        case 'right':\n          return (\n            React.createElement(\"text\", {\n              strokeWidth: strokeWidth, \n              y: props.offset, x: -props.height/2, \n              textAnchor: \"middle\", \n              transform: \"rotate(270)\"}, \n              props.label\n            )\n          );\n      }\n    }\n    return React.createElement(\"text\", null);\n  }\n\n});\n\n\n\n\n},{}],27:[function(require,module,exports){\n'use strict';\n\nvar React = (window.React);\nvar d3 = (window.d3);\nvar AxisTicks = require('./AxisTicks');\nvar AxisLine = require('./AxisLine');\nvar Label = require('./Label');\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\n  propTypes: {\n    xAxisClassName: React.PropTypes.string.isRequired,\n    xOrient: React.PropTypes.oneOf(['top', 'bottom']),\n    xScale: React.PropTypes.func.isRequired,\n    height: React.PropTypes.number.isRequired,\n    fill: React.PropTypes.string,\n    stroke: React.PropTypes.string,\n    tickStroke: React.PropTypes.string,\n    strokeWidth: React.PropTypes.string,\n    xAxisOffset: React.PropTypes.number\n  },\n\n  getDefaultProps:function() {\n    return {\n      xAxisClassName: 'x axis',\n      xAxisLabelOffset: 10,\n      xOrient: 'bottom',\n      fill: 'none',\n      stroke: 'none',\n      tickStroke: '#000',\n      strokeWidth: 'none',\n      xAxisOffset: 0,\n      label: ''\n    };\n  },\n\n  render:function() {\n    var props = this.props;\n\n    var t = (\"translate(0,\" + (props.xAxisOffset + props.height) + \")\");\n\n    var tickArguments;\n    if (typeof props.xAxisTickCount !== 'undefined') {\n      tickArguments = [props.xAxisTickCount];\n    }\n    \n    if (typeof props.xAxisTickInterval !== 'undefined') {\n      tickArguments = [d3.time[props.xAxisTickInterval.unit], props.xAxisTickInterval.interval];\n    }\n\n    return (\n      React.createElement(\"g\", {\n        className: props.xAxisClassName, \n        transform: t\n      }, \n        React.createElement(Label, {\n          label: props.xAxisLabel, \n          offset: props.xAxisLabelOffset, \n          orient: props.xOrient, \n          margins: props.margins, \n          width: props.width}\n        ), \n        React.createElement(AxisTicks, {\n          tickFormatting: props.tickFormatting, \n          tickArguments: tickArguments, \n          xScale: props.xScale, \n          orient: props.xOrient}\n        ), \n        React.createElement(AxisLine, React.__spread({\n          scale: props.xScale, \n          orient: props.xOrient}, \n          props)\n        )\n      )\n    );\n  }\n\n});\n\n\n},{\"./AxisLine\":24,\"./AxisTicks\":25,\"./Label\":26}],28:[function(require,module,exports){\n'use strict';\n\nvar React = (window.React);\nvar d3 = (window.d3);\nvar AxisTicks = require('./AxisTicks');\nvar AxisLine = require('./AxisLine');\nvar Label = require('./Label');\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\n  propTypes: {\n    yAxisClassName: React.PropTypes.string,\n    yOrient: React.PropTypes.oneOf(['left', 'right']),\n    yScale: React.PropTypes.func.isRequired,\n    fill: React.PropTypes.string,\n    stroke: React.PropTypes.string,\n    tickStroke: React.PropTypes.string,\n    strokeWidth: React.PropTypes.string,\n    yAxisOffset: React.PropTypes.number\n  },\n\n  getDefaultProps:function() {\n    return {\n      yAxisClassName: 'y axis',\n      yOrient: 'left',\n      fill: 'none',\n      stroke: '#000',\n      tickStroke: '#000',\n      strokeWidth: '1',\n      yAxisOffset: 0\n    };\n  },\n\n  render:function() {\n\n    var props = this.props;\n\n    var t;\n    if (props.yOrient === 'right') {\n       t = (\"translate(\" + (props.yAxisOffset + props.width) + \",0)\");\n    } else {\n       t = (\"translate(\" + props.yAxisOffset + \",0)\");\n    }\n\n    var tickArguments;\n    if (props.yAxisTickCount) {\n      tickArguments = [props.yAxisTickCount];\n    }\n    \n    if (props.yAxisTickInterval) {\n      tickArguments = [d3.time[props.yAxisTickInterval.unit], props.yAxisTickInterval.interval];\n    }\n\n    return (\n      React.createElement(\"g\", {\n        className: props.yAxisClassName, \n        transform: t\n      }, \n        React.createElement(AxisTicks, {\n          tickFormat: props.tickFormat, \n          tickArguments: tickArguments, \n          yScale: props.yScale, \n          orient: props.yOrient, \n          height: props.height, \n          width: props.width}\n        ), \n        React.createElement(AxisLine, React.__spread({\n          scale: props.yScale, \n          orient: props.yOrient}, \n          props)\n        ), \n        React.createElement(Label, {\n          label: props.yAxisLabel, \n          offset: props.yAxisLabelOffset, \n          orient: props.yOrient, \n          margins: props.margins, \n          height: props.height, \n          width: props.width}\n        )\n      )\n    );\n  }\n\n});\n\n\n},{\"./AxisLine\":24,\"./AxisTicks\":25,\"./Label\":26}],29:[function(require,module,exports){\n\nexports.XAxis = require('./XAxis');\nexports.YAxis = require('./YAxis');\n\n\n},{\"./XAxis\":27,\"./YAxis\":28}],30:[function(require,module,exports){\n'use strict';\n\nvar React = (window.React);\n\nmodule.exports = React.createClass({displayName: \"exports\",\n  render: function() {\n    return (\n      React.createElement(\"div\", null, \n        React.createElement(\"h4\", null, this.props.title), \n        React.createElement(\"svg\", {\n          viewBox: this.props.viewBox, \n          width: this.props.width, \n          height: this.props.height\n        }, this.props.children)\n      )\n    );\n  }\n});\n\n\n},{}],31:[function(require,module,exports){\n'use strict';\n\nvar React = (window.React);\nvar LegendChart = require('./LegendChart');\nvar BasicChart = require('./BasicChart');\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\n  propTypes: {\n    legend: React.PropTypes.bool,\n    viewBox: React.PropTypes.string\n  },\n\n  getDefaultProps: function() {\n    return {\n      legend: false\n    };\n  },\n\n  render: function() {\n    if (this.props.legend) {\n      return React.createElement(LegendChart, React.__spread({},  this.props));\n    }\n    return React.createElement(BasicChart, React.__spread({},  this.props));\n  }\n\n});\n\n\n\n},{\"./BasicChart\":30,\"./LegendChart\":32}],32:[function(require,module,exports){\n'use strict';\n\nvar React = (window.React);\nvar Legend = require('../Legend');\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\n  propTypes: {\n    legend: React.PropTypes.bool,\n    legendPosition: React.PropTypes.string,\n    sideOffset: React.PropTypes.number,\n    margins: React.PropTypes.object,\n    data: React.PropTypes.oneOfType([\n      React.PropTypes.object,\n      React.PropTypes.array\n    ])\n  },\n\n  getDefaultProps:function() {\n    return {\n      data: {},\n      legend: false,\n      legendPosition: 'right',\n      sideOffset: 90\n    };\n  },\n\n  _renderLegend:function() {\n    if (this.props.legend) {\n      return (\n        React.createElement(Legend, {\n          legendPosition: this.props.legendPosition, \n          margins: this.props.margins, \n          colors: this.props.colors, \n          data: this.props.data, \n          width: this.props.width, \n          height: this.props.height, \n          sideOffset: this.props.sideOffset}\n        ) \n      );\n    }\n  },\n\n  render:function() {\n    return (\n      React.createElement(\"div\", {style: {'width': this.props.width, 'height': this.props.height}}, \n        React.createElement(\"h4\", null, this.props.title), \n        this._renderLegend(), \n        React.createElement(\"svg\", {viewBox: this.props.viewBox, width: this.props.width - this.props.sideOffset, height: this.props.height}, this.props.children)\n      )\n    );\n  }\n});\n\n\n},{\"../Legend\":22}],33:[function(require,module,exports){\n\nexports.BasicChart = require('./BasicChart');\nexports.Chart = require('./Chart');\nexports.LegendChart = require('./LegendChart');\n\n\n},{\"./BasicChart\":30,\"./Chart\":31,\"./LegendChart\":32}],34:[function(require,module,exports){\n\nexports.XAxis = require('./axes').XAxis;\nexports.YAxis = require('./axes').YAxis;\nexports.Chart = require('./charts').Chart;\nexports.LegendChart = require('./charts').LegendChart;\nexports.Legend = require('./Legend');\nexports.Voronoi = require('./Voronoi');\n\n\n},{\"./Legend\":22,\"./Voronoi\":23,\"./axes\":29,\"./charts\":33}],35:[function(require,module,exports){\n'use strict';\n\nvar React = (window.React);\n\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\n  propTypes: {\n    cx: React.PropTypes.number,\n    cy: React.PropTypes.number,\n    r: React.PropTypes.number,\n    fill: React.PropTypes.string\n  },\n\n  getDefaultProps:function() {\n    return {\n      fill: '#1f77b4',\n      className: 'rd3-linechart-circle'\n    };\n  },\n\n  getInitialState:function() {\n    // state for animation usage\n    return {\n      circleRadius: this.props.r,\n      circleColor: this.props.fill\n    };\n  },\n\n  componentDidMount:function() {\n    var props = this.props;\n    // The circle reference is observed when both it is set to\n    // active, and to inactive, so we have to check which one\n    var unobserve = props.voronoiRef.observe(function()  {\n      var circleStatus = props.voronoiRef.cursor().deref();\n      var seriesName = props.id.split('-')[0];\n      if (circleStatus === 'active') {\n        this._animateCircle(props.id);\n        props.structure.cursor('voronoiSeries').cursor(seriesName).update(function(){return 'active';});\n      } else if (circleStatus === 'inactive') {\n        this._restoreCircle(props.id);\n        props.structure.cursor('voronoiSeries').cursor(seriesName).update(function(){return 'inactive';});\n      }\n    }.bind(this));\n  },\n\n  componentWillUnmount:function() {\n    this.props.voronoiRef.destroy();\n  },\n\n  render:function() {\n    var props = this.props;\n    return (\n      React.createElement(\"circle\", {\n        cx: props.cx, \n        cy: props.cy, \n        r: this.state.circleRadius, \n        fill: this.state.circleColor, \n        id: props.id, \n        className: props.className}\n      )\n    );\n  },\n  \n  _animateCircle:function(id) {\n    this.setState({ \n      circleRadius: this.state.circleRadius * ( 5 / 4 )\n    });\n  },\n\n  _restoreCircle:function(id) {\n    this.setState({ \n      circleRadius: this.props.r\n    });\n  }\n\n});\n\n\n},{}],36:[function(require,module,exports){\n'use strict';\n\nvar React = (window.React);\nvar d3 = (window.d3);\nvar Line = require('./Line');\nvar Circle = require('./Circle');\n\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\n  propTypes: {\n    data: React.PropTypes.array,\n    interpolationType: React.PropTypes.string,\n    fill: React.PropTypes.string,\n    xAccessor: React.PropTypes.func,\n    yAccessor: React.PropTypes.func,\n    displayDataPoints: React.PropTypes.bool\n  },\n\n  getDefaultProps:function() {\n    return {\n      data: [],\n      interpolationType: 'linear',\n      fill: '#fff',\n      xAccessor: function(d)  {return d.x;},\n      yAccessor: function(d)  {return d.y;},\n      displayDataPoints: true\n    };\n  },\n\n  _isDate:function(d, accessor) {\n    return Object.prototype.toString.call(accessor(d)) === '[object Date]';\n  },\n\n  render:function() {\n\n    var props = this.props;\n\n    var xAccessor = props.xAccessor,\n        yAccessor = props.yAccessor;\n\n    // Create array of paths, which we'll map over\n    // to generate SVG lines\n    var interpolatePath = d3.svg.line()\n        .y(function(d) {\n          return props.yScale(props.yAccessor(d));\n        })\n        .interpolate(props.interpolationType);\n\n    // Check whether or not an arbitrary data element\n    // is a date object (at index 0 here)\n    // If it's a date, then we set the x scale a bit differently\n    if (this._isDate(props.data[0], xAccessor)) {\n        interpolatePath.x(function(d) {\n          return props.xScale(props.xAccessor(d).getTime());\n        });\n    } else {\n        interpolatePath.x(function(d) {\n          return props.xScale(props.xAccessor(d));\n        });\n    }\n\n\n    // Create an immstruct reference for the series name\n    // and set it to 'inactive'\n    props.structure.cursor('voronoiSeries').set(props.seriesName, 'inactive');\n\n    // Having set the Voronoi line series name cursor to 'inactive'\n    // We now pass on the Voronoi line series name reference to the \n    // *both* the line and circle component\n    var voronoiSeriesRef = props.structure.reference(['voronoiSeries', props.seriesName]);\n\n\n    var circles = null;\n\n    if (props.displayDataPoints) {\n      // Map over data to generate SVG circles at data points\n      // if datum is a date object, treat it a bit differently\n      circles = props.data.map(function(point, i) {\n        var cx, cy;\n        if (this._isDate(point, xAccessor)) {\n          cx = props.xScale(xAccessor(point).getTime());\n        } else {\n          cx = props.xScale(xAccessor(point));\n        }\n        if (this._isDate(point, yAccessor)) {\n          cy = props.yScale(yAccessor(point).getTime());\n        } else {\n          cy = props.yScale(yAccessor(point));\n        }\n\n        var id= props.seriesName + '-' + i;\n\n        // Create an immstruct reference for the circle id\n        // and set it to 'inactive'\n        props.structure.cursor('voronoi').set(id, 'inactive');\n\n        // Having set the Voronoi circle id cursor to 'inactive'\n        // We now pass on the Voronoi circle id reference to the \n        // circle component, where it will be observed and dereferenced\n        var voronoiRef = props.structure.reference(['voronoi', id]);\n\n        return (\n          React.createElement(Circle, {\n            voronoiRef: voronoiRef, \n            voronoiSeriesRef: voronoiSeriesRef, \n            structure: props.structure, \n            cx: cx, \n            cy: cy, \n            r: props.pointRadius, \n            fill: props.fill, \n            key: props.seriesName + i, \n            id: props.seriesName + '-' + i}\n          )\n        );\n      }, this);\n    }\n\n    return (\n      React.createElement(\"g\", null, \n        React.createElement(Line, {\n          voronoiSeriesRef: voronoiSeriesRef, \n          path: interpolatePath(props.data), \n          stroke: props.fill, \n          seriesName: props.seriesName}\n        ), \n        circles\n      )\n    );\n  }\n\n});\n\n\n},{\"./Circle\":35,\"./Line\":37}],37:[function(require,module,exports){\n'use strict';\n\nvar React = (window.React);\n\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\n  propTypes: {\n    data: React.PropTypes.object,\n    strokeWidth: React.PropTypes.number,\n    path: React.PropTypes.string,\n    fill: React.PropTypes.string,\n    stroke: React.PropTypes.string\n  },\n\n  getDefaultProps:function() {\n    return {\n      stroke: '#1f77b4',\n      strokeWidth: 1.5,\n      fill: 'none',\n      className: 'rd3-linechart-path'\n    };\n  },\n\n  getInitialState:function() {\n    // state for animation usage\n    return {\n      lineStrokeWidth: this.props.strokeWidth,\n      lineStroke: this.props.stroke\n    };\n  },\n\n  componentDidMount:function() {\n    var props = this.props;\n    // The circle reference is observed when both it is set to\n    // active, and to inactive, so we have to check which one\n    var unobserve = props.voronoiSeriesRef.observe(function()  {\n      var lineStatus = props.voronoiSeriesRef.cursor().deref();\n      if (lineStatus === 'active') {\n        this._animateLine(props.id);\n      } else if (lineStatus === 'inactive') {\n        this._restoreLine(props.id);\n      }\n    }.bind(this));\n  },\n\n  componentWillUnmount:function() {\n    this.props.voronoiSeriesRef.destroy();\n  },\n\n  _animateLine:function(id) {\n    this.setState({ \n      lineStrokeWidth: this.state.lineStrokeWidth * 1.8\n    });\n  },\n\n  _restoreLine:function(id) {\n    this.setState({ \n      lineStrokeWidth: this.props.strokeWidth\n    });\n  },\n\n  render:function() {\n    var props = this.props;\n    var state = this.state;\n    return (\n      React.createElement(\"path\", {\n        d: props.path, \n        stroke: state.lineStroke, \n        strokeWidth: state.lineStrokeWidth, \n        fill: props.fill, \n        className: props.className}\n      )\n    );\n  }\n\n});\n\n\n},{}],38:[function(require,module,exports){\n'use strict';\n\nvar React = (window.React);\nvar d3 = (window.d3);\nvar common = require('../common');\nvar Chart = common.Chart;\nvar XAxis = common.XAxis;\nvar YAxis = common.YAxis;\nvar Voronoi = common.Voronoi;\nvar utils = require('../utils');\nvar immstruct = require('immstruct');\nvar DataSeries = require('./DataSeries');\nvar mixins = require('../mixins');\nvar CartesianChartPropsMixin = mixins.CartesianChartPropsMixin;\n\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\n  mixins: [ CartesianChartPropsMixin ],\n\n  propTypes: {\n    margins: React.PropTypes.object,\n    pointRadius: React.PropTypes.number,\n    colors: React.PropTypes.func,\n    displayDataPoints: React.PropTypes.bool\n  },\n\n  getDefaultProps:function() {\n    return {\n      margins: {top: 10, right: 20, bottom: 40, left: 45},\n      className: 'rd3-linechart',\n      pointRadius: 3,\n      interpolate: false,\n      interpolationType: null,\n      displayDataPoints: true\n    };\n  },\n\n  render:function() {\n\n    var structure = immstruct('lineChart', { voronoi: {}, voronoiSeries: {}});\n\n    var props = this.props;\n\n    var interpolationType = props.interpolationType || (props.interpolate ? 'cardinal' : 'linear');\n\n    // Calculate inner chart dimensions\n    var innerWidth, innerHeight;\n\n    innerWidth = props.width - props.margins.left - props.margins.right;\n    innerHeight = props.height - props.margins.top - props.margins.bottom;\n\n    if (props.legend) {\n      innerWidth = innerWidth - props.legendOffset;\n    }\n\n    if (!Array.isArray(props.data)) {\n      props.data = [props.data];\n    }\n\n    var flattenedData = utils.flattenData(props.data, props.xAccessor, props.yAccessor);\n\n    var allValues = flattenedData.allValues,\n        xValues = flattenedData.xValues,\n        yValues = flattenedData.yValues;\n\n    var scales = utils.calculateScales(innerWidth, innerHeight, xValues, yValues);\n\n    var trans = (\"translate(\" +  props.margins.left + \",\" +  props.margins.top + \")\");\n\n    var dataSeriesArray = props.data.map( function(series, idx)  {\n      return (\n          React.createElement(DataSeries, {\n            structure: structure, \n            xScale: scales.xScale, \n            yScale: scales.yScale, \n            seriesName: series.name, \n            data: series.values, \n            width: innerWidth, \n            height: innerHeight, \n            fill: props.colors(idx), \n            pointRadius: props.pointRadius, \n            key: series.name, \n            xAccessor: props.xAccessor, \n            yAccessor: props.yAccessor, \n            interpolationType: interpolationType, \n            displayDataPoints: props.displayDataPoints}\n          )\n      );\n    });\n\n    return (\n      React.createElement(Chart, {\n        viewBox: props.viewBox, \n        legend: props.legend, \n        data: props.data, \n        margins: props.margins, \n        colors: props.colors, \n        width: props.width, \n        height: props.height, \n        title: props.title\n      }, \n        React.createElement(\"g\", {transform: trans, className: props.className}, \n          dataSeriesArray, \n          React.createElement(Voronoi, {\n            structure: structure, \n            data: allValues, \n            xScale: scales.xScale, \n            yScale: scales.yScale, \n            width: innerWidth, \n            height: innerHeight}\n          ), \n          React.createElement(XAxis, {\n            xAxisClassName: \"rd3-linechart-xaxis\", \n            xAxisFormatter: props.xAxisFormatter, \n            xAxisLabel: props.xAxisLabel, \n            xAxisLabelOffset: props.xAxisLabelOffset, \n            xAxisTickCount: props.xAxisTickCount, \n            xOrient: props.xOrient, \n            xScale: scales.xScale, \n            margins: props.margins, \n            width: innerWidth, \n            height: innerHeight, \n            stroke: props.axesColor, \n            strokeWidth: props.strokeWidth}\n          ), \n          React.createElement(YAxis, {\n            yAxisClassName: \"rd3-linechart-yaxis\", \n            yAxisFormatter: props.yAxisFormatter, \n            yAxisLabel: props.yAxisLabel, \n            yAxisLabelOffset: props.yAxisLabelOffset, \n            yAxisTickCount: props.yAxisTickCount, \n            yScale: scales.yScale, \n            yOrient: props.yOrient, \n            margins: props.margins, \n            width: innerWidth, \n            height: innerHeight, \n            stroke: props.axesColor}\n          )\n        )\n      )\n    );\n  }\n\n});\n\n\n},{\"../common\":34,\"../mixins\":41,\"../utils\":54,\"./DataSeries\":36,\"immstruct\":2}],39:[function(require,module,exports){\n\nexports.LineChart = require('./LineChart');\n\n\n},{\"./LineChart\":38}],40:[function(require,module,exports){\n'use strict';\n\nvar React = (window.React);\nvar d3 = (window.d3);\n\nmodule.exports =  {\n\n  propTypes: {\n    axesColor: React.PropTypes.string,\n    colors: React.PropTypes.func,\n    data: React.PropTypes.oneOfType([\n      React.PropTypes.array,\n      React.PropTypes.object\n    ]).isRequired,\n    xOrient: React.PropTypes.oneOf(['top', 'bottom']),\n    yOrient: React.PropTypes.oneOf(['left', 'right']),\n    yAxisTickCount: React.PropTypes.number,\n    yAxisLabel: React.PropTypes.string,\n    yAxisLabelOffset: React.PropTypes.number,\n    xAxisTickInterval: React.PropTypes.object,\n    xAxisLabel: React.PropTypes.string,\n    xAxisLabelOffset: React.PropTypes.number,\n    legend: React.PropTypes.bool,\n    legendOffset: React.PropTypes.number,\n    width: React.PropTypes.number,\n    height: React.PropTypes.number,\n    xAccessor: React.PropTypes.func,\n    yAccessor: React.PropTypes.func,\n    title: React.PropTypes.string,\n    viewBox: React.PropTypes.string\n  },\n\n  getDefaultProps: function() {\n    return {\n      data: [],\n      xOrient: 'bottom',\n      xAxisLabel: '',\n      xAxisLabelOffset: 38,\n      yOrient: 'left',\n      yAxisLabel: '',\n      yAxisLabelOffset: 35,\n      legend: false,\n      legendOffset: 120,\n      width: 400,\n      height: 200,\n      axesColor: '#000',\n      title: '',\n      colors: d3.scale.category20c(),\n      xAccessor: function(d)  {return d.x;},\n      yAccessor: function(d)  {return d.y;}\n    };\n  }\n\n};\n\n\n},{}],41:[function(require,module,exports){\n\nexports.CartesianChartPropsMixin = require('./CartesianChartPropsMixin');\n\n\n},{\"./CartesianChartPropsMixin\":40}],42:[function(require,module,exports){\n'use strict';\n\nvar React = (window.React);\nvar d3 = (window.d3);\n\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\n  propTypes: {\n    fill: React.PropTypes.string,\n    d: React.PropTypes.string,\n    startAngle: React.PropTypes.number,\n    endAngle: React.PropTypes.number,\n    innerRadius: React.PropTypes.number,\n    outerRadius: React.PropTypes.number,\n    labelTextFill: React.PropTypes.string,\n    valueTextFill: React.PropTypes.string\n  },\n\n  getDefaultProps:function() {\n    return {\n      labelTextFill: 'black',\n      valueTextFill: 'white'\n    };\n  },\n\n  render:function() {\n    var props = this.props;\n    var arc = d3.svg.arc()\n      .innerRadius(props.innerRadius)\n      .outerRadius(props.outerRadius)\n      .startAngle(props.startAngle)\n      .endAngle(props.endAngle);\n    var rotate = (\"rotate(\" + ( (props.startAngle+props.endAngle)/2 * (180/Math.PI)) + \")\");\n    var positions = arc.centroid();\n    var radius = props.outerRadius;\n    var dist   = radius + 35;\n    var angle  = (props.startAngle + props.endAngle) / 2;\n    var x      = dist * (1.2 * Math.sin(angle));\n    var y      = -dist * Math.cos(angle);\n    var t = (\"translate(\" + x + \",\" + y + \")\");\n\n    return (\n      React.createElement(\"g\", {className: \"rd3-piechart-arc\"}, \n        React.createElement(\"path\", {\n          d: arc(), \n          fill: props.fill}\n        ), \n        React.createElement(\"line\", {\n          x1: \"0\", \n          x2: \"0\", \n          y1: -radius - 2, \n          y2: -radius - 26, \n          stroke: props.labelTextFill, \n          transform: rotate, \n          style: {\n            'fill': props.labelTextFill,\n            'strokeWidth': 2\n          }\n        }\n        ), \n        React.createElement(\"text\", {\n          className: \"rd3-piechart-label\", \n          transform: t, \n          dy: \".35em\", \n          style: {\n            'textAnchor': 'middle',\n            'fill': props.labelTextFill,\n            'shapeRendering': 'crispEdges'\n          }}, \n          props.label\n        ), \n        React.createElement(\"text\", {\n          className: \"rd3-piechart-text\", \n          transform: (\"translate(\" + arc.centroid() + \")\"), \n          dy: \".35em\", \n          style: {\n            'shapeRendering': 'crispEdges',\n            'textAnchor': 'middle',\n            'fill': props.valueTextFill\n          }}, \n          props.value + '%'\n        )\n      )\n    );\n  }\n});\n\n\n},{}],43:[function(require,module,exports){\n'use strict';\n\nvar React = (window.React);\nvar d3 = (window.d3);\nvar Arc = require('./Arc');\n\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\n  propTypes: {\n    transform: React.PropTypes.string,\n    data: React.PropTypes.array,\n    innerRadius: React.PropTypes.number,\n    radius: React.PropTypes.number,\n    colors: React.PropTypes.func\n  },\n\n  getDefaultProps:function() {\n    return {\n      innerRadius: 0,\n      data: [],\n      colors: d3.scale.category20c()\n    };\n  },\n\n  render:function() {\n\n    var props = this.props;\n\n    var pie = d3.layout\n      .pie()\n      .sort(null);\n\n    var arcData = pie(props.data);\n\n    var arcs = arcData.map(function(arc, i)  {\n      return (\n        React.createElement(Arc, {\n          startAngle: arc.startAngle, \n          endAngle: arc.endAngle, \n          outerRadius: props.radius, \n          innerRadius: props.innerRadius, \n          labelTextFill: props.labelTextFill, \n          valueTextFill: props.valueTextFill, \n          fill: props.colors(i), \n          label: props.labels[i], \n          value: props.data[i], \n          key: i, \n          width: props.width}\n        )\n      );\n    });\n    return (\n      React.createElement(\"g\", {className: \"rd3-piechart-pie\", transform: props.transform}, arcs)\n    );\n  }\n});\n\n\n},{\"./Arc\":42}],44:[function(require,module,exports){\n'use strict';\n\nvar React = (window.React);\nvar DataSeries = require('./DataSeries');\nvar Chart = require('../common').Chart;\n\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\n  getDefaultProps: function() {\n    return {\n      title: ''\n    };\n  },\n\n  propTypes: {\n    radius: React.PropTypes.number,\n    cx: React.PropTypes.number,\n    cy: React.PropTypes.number,\n    labelTextFill: React.PropTypes.string,\n    valueTextFill: React.PropTypes.string,\n    colors: React.PropTypes.func,\n    title: React.PropTypes.string\n  },\n\n  render: function() {\n    var props = this.props;\n    var transform = (\"translate(\" + ( props.cx || props.width/2) + \",\" + ( props.cy || props.height/2) + \")\");\n\n    var data = props.data.map( function(item)  {return item.value;} );\n    var labels = props.data.map( function(item)  {return item.label;} );\n\n    return (\n      React.createElement(Chart, {\n        width: props.width, \n        height: props.height, \n        title: props.title\n      }, \n        React.createElement(\"g\", {className: \"rd3-piechart\"}, \n          React.createElement(DataSeries, {\n            labelTextFill: props.labelTextFill, \n            valueTextFill: props.valueTextFill, \n            labels: labels, \n            colors: props.colors, \n            transform: transform, \n            data: data, \n            width: props.width, \n            height: props.height, \n            radius: props.radius, \n            innerRadius: props.innerRadius}\n          )\n        )\n      )\n    );\n  }\n\n});\n\n\n},{\"../common\":34,\"./DataSeries\":43}],45:[function(require,module,exports){\n\nexports.PieChart = require('./PieChart');\n\n\n},{\"./PieChart\":44}],46:[function(require,module,exports){\n'use strict';\n\nvar React = (window.React);\nvar d3 = (window.d3);\nvar utils = require('../utils');\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\n  propTypes: {\n    id: React.PropTypes.string,\n    cx: React.PropTypes.number,\n    cy: React.PropTypes.number,\n    r: React.PropTypes.number,\n    fill: React.PropTypes.string,\n    stroke: React.PropTypes.string,\n    strokeWidth: React.PropTypes.number,\n    strokeOpacity: React.PropTypes.number,\n    hoverAnimation: React.PropTypes.bool\n  },\n\n  getDefaultProps:function() {\n    return {\n      fill: '#1f77b4',\n      className: 'rd3-scatterchart-circle'\n    };\n  },\n\n  getInitialState:function() {\n    // state for animation usage\n    return {\n      circleRadius: this.props.r,\n      circleFill: this.props.fill\n    };\n  },\n\n  componentDidMount:function() {\n    var props = this.props;\n    // The circle reference is observed when both it is set to\n    // active, and to inactive, so we have to check which one\n    var unobserve = props.voronoiRef.observe(function()  {\n      var circleStatus = props.voronoiRef.cursor().deref();\n      if (circleStatus === 'active') {\n        this._animateCircle(props.id);\n      } else if (circleStatus === 'inactive') {\n        this._restoreCircle(props.id);\n      }\n    }.bind(this));\n  },\n\n  componentWillUnmount:function() {\n    this.props.voronoiRef.destroy();\n  },\n\n  render:function() {\n    return (\n      React.createElement(\"circle\", {\n        fill: this.state.circleFill, \n        cx: this.props.cx, \n        cy: this.props.cy, \n        r: this.state.circleRadius, \n        id: this.props.id, \n        className: this.props.className}\n      )\n    );\n  },\n\n  _animateCircle:function(id) {\n    this.setState({ \n      circleRadius: this.state.circleRadius * ( 5 / 4 ),\n      circleFill: utils.shade(this.props.fill, -0.2)\n    });\n  },\n\n  _restoreCircle:function(id) {\n    this.setState({ \n      circleRadius: this.props.r,\n      circleFill: this.props.fill\n    });\n  }\n\n});\n\n\n},{\"../utils\":54}],47:[function(require,module,exports){\n'use strict';\n\nvar React = (window.React);\nvar Circle = require('./Circle');\n\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\n  propTypes: {\n    data: React.PropTypes.array,\n    fill: React.PropTypes.string,\n    xAccessor: React.PropTypes.func,\n    yAccessor: React.PropTypes.func\n  },\n\n  getDefaultProps:function() {\n    return {\n      data: [],\n      fill: '#fff',\n      xAccessor: function(d)  {return d.x;},\n      yAccessor: function(d)  {return d.y;}\n    };\n  },\n\n  render:function() {\n\n    var props = this.props;\n\n    var circles = props.data.map(function(point, i)  {\n\n      var xAccessor = props.xAccessor,\n          yAccessor = props.yAccessor,\n          cx, cy;\n      if (Object.prototype.toString.call(xAccessor(point)) === '[object Date]') {\n        cx = props.xScale(xAccessor(point).getTime());\n      } else {\n        cx = props.xScale(xAccessor(point));\n      }\n      if (Object.prototype.toString.call(yAccessor(point)) === '[object Date]') {\n        cy = props.yScale(yAccessor(point).getTime());\n      } else {\n        cy = props.yScale(yAccessor(point));\n      }\n\n      var id = props.seriesName + '-' + i;\n\n      // Create an immstruct reference for the circle id\n      // and set it to 'inactive'\n      props.structure.cursor('voronoi').set(id, 'inactive');\n\n      // Having set the Voronoi circle id cursor to 'inactive'\n      // We now pass on the Voronoi circle id reference to the \n      // circle component, where it will be observed and dereferenced\n      var voronoiRef = props.structure.reference(['voronoi', id]);\n\n      return (React.createElement(Circle, {\n        voronoiRef: voronoiRef, \n        cx: cx, \n        cy: cy, \n        r: props.pointRadius, \n        fill: props.fill, \n        key: props.seriesName + i, \n        id: id}\n      ));\n    }, this);\n\n    return (\n      React.createElement(\"g\", null, \n        circles\n      )\n    );\n  }\n\n});\n\n\n},{\"./Circle\":46}],48:[function(require,module,exports){\n'use strict';\n\nvar React = (window.React);\nvar d3 = (window.d3);\nvar common = require('../common');\nvar Chart = common.Chart;\nvar XAxis = common.XAxis;\nvar YAxis = common.YAxis;\nvar Voronoi = common.Voronoi;\nvar utils = require('../utils');\nvar immstruct = require('immstruct');\nvar DataSeries = require('./DataSeries');\nvar CartesianChartPropsMixin = require('../mixins').CartesianChartPropsMixin;\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\n  mixins: [ CartesianChartPropsMixin ],\n\n  propTypes: {\n    margins: React.PropTypes.object,\n    pointRadius: React.PropTypes.number,\n    hoverAnimation: React.PropTypes.bool\n },\n\n  getDefaultProps:function() {\n    return {\n      pointRadius: 3,\n      margins: {top: 10, right: 20, bottom: 50, left: 45},\n      hoverAnimation: true\n    };\n  },\n\n  _calculateScales: utils.calculateScales,\n\n  render:function() {\n\n    var structure = immstruct('scatterChart', { voronoi: {}});\n\n    var props = this.props;\n\n    if (this.props.data && this.props.data.length < 1) {\n      return React.createElement(\"g\", null);\n    }\n\n    // Calculate inner chart dimensions\n    var innerWidth, innerHeight;\n\n    innerWidth = props.width - props.margins.left - props.margins.right;\n    innerHeight = props.height - props.margins.top - props.margins.bottom;\n\n    if (props.legend) {\n      innerWidth = innerWidth - props.legendOffset;\n    }\n\n    if (!Array.isArray(props.data)) {\n      props.data = [props.data];\n    }\n\n    // // Set margins if label is set\n    // if (props.xAxisLabel) {\n    //   var orient = props.xOrient;\n    //   props.margins[orient] = props.margins[orient] + 10;\n    // }\n    //\n    // // Set margins if label is set\n    // if (props.yAxisLabel) {\n    //   var orient = props.yOrient;\n    //   props.margins[orient] = props.margins[orient] + 10;\n    // }\n\n\n    // Returns an object of flattened allValues, xValues, and yValues\n    var flattenedData = utils.flattenData(props.data, props.xAccessor, props.yAccessor);\n\n    var allValues = flattenedData.allValues,\n        xValues = flattenedData.xValues,\n        yValues = flattenedData.yValues;\n\n    var scales = this._calculateScales(innerWidth, innerHeight, xValues, yValues);\n\n    var trans = \"translate(\" + (props.yAxisOffset < 0 ? props.margins.left + Math.abs(props.yAxisOffset) : props.margins.left) + \",\" + props.margins.top + \")\";\n\n    var dataSeriesArray = props.data.map( function(series, idx)  {\n      return (\n          React.createElement(DataSeries, {\n            structure: structure, \n            xScale: scales.xScale, \n            yScale: scales.yScale, \n            seriesName: series.name, \n            data: series.values, \n            width: innerWidth, \n            height: innerHeight, \n            fill: props.colors(idx), \n            pointRadius: props.pointRadius, \n            key: series.name, \n            hoverAnimation: props.hoverAnimation, \n            xAccessor: props.xAccessor, \n            yAccessor: props.yAccessor}\n          )\n      );\n    });\n\n    return (\n      React.createElement(Chart, {\n        viewBox: props.viewBox, \n        legend: props.legend, \n        data: props.data, \n        margins: props.margins, \n        colors: props.colors, \n        width: props.width, \n        height: props.height, \n        title: props.title}, \n        React.createElement(\"g\", {transform: trans, className: \"rd3-scatterchart\"}, \n          React.createElement(Voronoi, {\n            structure: structure, \n            data: allValues, \n            yScale: scales.yScale, \n            xScale: scales.xScale, \n            width: innerWidth, \n            height: innerHeight}\n          ), \n          dataSeriesArray, \n          React.createElement(XAxis, {\n            xAxisClassName: \"rd3-scatterchart-xaxis\", \n            strokeWidth: \"1\", \n            xAxisTickInterval: props.xAxisTickInterval, \n            xAxisOffset: props.xAxisOffset, \n            xScale: scales.xScale, \n            xAxisLabel: props.xAxisLabel, \n            xAxisLabelOffset: props.xAxisLabelOffset, \n            xOrient: props.xOrient, \n            data: props.data, \n            margins: props.margins, \n            width: innerWidth, \n            height: innerHeight, \n            stroke: props.axesColor}\n          ), \n          React.createElement(YAxis, {\n            yAxisClassName: \"rd3-scatterchart-yaxis\", \n            yScale: scales.yScale, \n            yAxisTickCount: props.yAxisTickCount, \n            yAxisOffset: props.yAxisOffset, \n            yAxisLabel: props.yAxisLabel, \n            yAxisLabelOffset: props.yAxisLabelOffset, \n            yOrient: props.yOrient, \n            margins: props.margins, \n            width: innerWidth, \n            height: innerHeight, \n            stroke: props.axesColor}\n          )\n        )\n      )\n    );\n  }\n\n});\n\n\n},{\"../common\":34,\"../mixins\":41,\"../utils\":54,\"./DataSeries\":47,\"immstruct\":2}],49:[function(require,module,exports){\n\nexports.ScatterChart = require('./ScatterChart');\n\n\n},{\"./ScatterChart\":48}],50:[function(require,module,exports){\n'use strict';\n\nvar React = (window.React);\nvar d3 = (window.d3);\n\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\n  propTypes: {\n    fill: React.PropTypes.string,\n    width: React.PropTypes.number,\n    height: React.PropTypes.number,\n    label: React.PropTypes.string\n  },\n\n  render:function() {\n\n    var props = this.props;\n    \n    var textStyle = {\n      'textAnchor': 'middle',\n      'fill': props.textColor,\n      'fontSize': props.fontSize\n    };\n\n    var t = (\"translate(\" + props.x + \", \" + props.y + \"  )\");\n\n    return (\n      React.createElement(\"g\", {transform: t}, \n        React.createElement(\"rect\", {\n          fill: props.fill, \n          width: props.width, \n          height: props.height, \n          className: \"rd3-treemap-cell\"}\n        ), \n        React.createElement(\"text\", {\n          x: props.width / 2, \n          y: props.height / 2, \n          dy: \".35em\", \n          style: textStyle, \n          className: \"rd3-treemap-cell-text\"\n        }, \n          props.label\n        )\n      )\n    );\n  }\n});\n\n\n},{}],51:[function(require,module,exports){\n'use strict';\n\nvar React = (window.React);\nvar d3 = (window.d3);\nvar Cell = require('./Cell');\n\n\nmodule.exports = React.createClass({displayName: \"exports\",\n  \n  propTypes: {\n    data: React.PropTypes.array,\n    value: React.PropTypes.string\n  },\n \n  getDefaultProps:function() {\n    return {\n      data: [],\n      value: 'value',\n      label: 'label'\n    };\n  },\n\n  render:function() {\n\n    var props = this.props;\n    \n    var data = props.data;\n    var value = props.value;\n    var label = props.label;\n\n    var colors = d3.scale.category20c();\n\n    var treemap = d3.layout.treemap()\n                    // make sure calculation loop through all objects inside array \n                    .children(function(d) {return d;})\n                    .size([props.width, props.height])\n                    .sticky(true)\n                    .value(function(d) { return d[value]; });\n    \n    var cells = treemap(data).map(function(node, i)  {\n      return (\n        React.createElement(Cell, {\n          x: node.x, \n          y: node.y, \n          width: node.dx, \n          height: node.dy, \n          fill: colors(i), \n          label: node[label], \n          fontSize: props.fontSize, \n          textColor: props.textColor, \n          key: i}\n        ) \n      ); \n    }, this);\n\n    return (\n      React.createElement(\"g\", {transform: props.transform, className: \"treemap\"}, \n        cells\n      )\n    );\n  }\n\n});\n\n\n},{\"./Cell\":50}],52:[function(require,module,exports){\n'use strict';\n\nvar React = (window.React);\nvar Chart = require('../common').Chart;\nvar DataSeries = require('./DataSeries');\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\n  propTypes: {\n    margins: React.PropTypes.object,\n    data: React.PropTypes.array, \n    width: React.PropTypes.number,\n    height: React.PropTypes.number,\n    title: React.PropTypes.string,\n    textColor: React.PropTypes.string,\n    fontSize: React.PropTypes.oneOfType([ \n      React.PropTypes.string,\n      React.PropTypes.number\n    ])\n\n  },\n\n  getDefaultProps:function() {\n    return {\n      data: [], \n      width: 400,\n      heigth: 200,\n      title: '',\n      textColor: '#f7f7f7',\n      fontSize: '0.85em'\n    };\n  },\n\n  render:function() {\n\n    var props = this.props;\n    \n    return (\n      React.createElement(Chart, {\n        title: props.title, \n        width: props.width, \n        height: props.height\n      }, \n        React.createElement(\"g\", {className: \"rd3-treemap\"}, \n          React.createElement(DataSeries, {\n            width: props.width, \n            height: props.height, \n            data: props.data, \n            textColor: props.textColor, \n            fontSize: props.fontSize}\n          )\n        )\n      )\n    );\n  }\n\n});\n\n\n},{\"../common\":34,\"./DataSeries\":51}],53:[function(require,module,exports){\n\nexports.Treemap = require('./Treemap');\n\n\n},{\"./Treemap\":52}],54:[function(require,module,exports){\nvar d3 = (window.d3);\n\n\nexports.calculateScales = function(chartWidth, chartHeight, xValues, yValues)  {\n\n  var xScale, yScale;\n\n  if (xValues.length > 0 && Object.prototype.toString.call(xValues[0]) === '[object Date]') {\n    xScale = d3.time.scale()\n      .range([0, chartWidth]);\n  } else {\n    xScale = d3.scale.linear()\n      .range([0, chartWidth]);\n  }\n  xScale.domain(d3.extent(xValues));\n\n  if (yValues.length > 0 && Object.prototype.toString.call(yValues[0]) === '[object Date]') {\n    yScale = d3.time.scale()\n      .range([chartHeight, 0]);\n  } else {\n    yScale = d3.scale.linear()\n      .range([chartHeight, 0]);\n  }\n\n  yScale.domain(d3.extent(yValues));\n\n  return {\n    xScale: xScale,\n    yScale: yScale\n  };\n\n};\n\n// debounce from Underscore.js\n// MIT License: https://raw.githubusercontent.com/jashkenas/underscore/master/LICENSE\n// Copyright (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative\n// Reporters & Editors\nexports.debounce = function(func, wait, immediate) {\n  var timeout;\n  return function() {\n    var context = this, args = arguments;\n    var later = function() {\n      timeout = null;\n      if (!immediate) {\n        func.apply(context, args);\n      }\n    };\n    var callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n};\n\nexports.flattenData = function(data, xAccessor, yAccessor)  {\n\n  var allValues = [];\n  var xValues = [];\n  var yValues = [];\n  var coincidentCoordinateCheck = {};\n\n  data.forEach( function(series)  {\n    series.values.forEach( function(item, idx)  {\n\n      var x = xAccessor(item);\n\n      // Check for NaN since d3's Voronoi cannot handle NaN values\n      // Go ahead and Proceed to next iteration since we don't want NaN\n      // in allValues or in xValues or yValues\n      if (isNaN(x)) {\n        return;\n      }\n      xValues.push(x);\n\n      var y = yAccessor(item);\n      // when yAccessor returns an object (as in the case of candlestick)\n      // iterate over the keys and push all the values to yValues array\n      var yNode;\n      if (typeof y === 'object' && Object.keys(y).length > 0) {\n        Object.keys(y).forEach(function (key) {\n          // Check for NaN since d3's Voronoi cannot handle NaN values\n          // Go ahead and Proceed to next iteration since we don't want NaN\n          // in allValues or in xValues or yValues\n          if (isNaN(y[key])) {\n            return;\n          }\n          yValues.push(y[key]);\n          // if multiple y points are to be plotted for a single x\n          // as in the case of candlestick, default to y value of 0\n          yNode = 0;\n        });\n      } else {\n        // Check for NaN since d3's Voronoi cannot handle NaN values\n        // Go ahead and Proceed to next iteration since we don't want NaN\n        // in allValues or in xValues or yValues\n        if (isNaN(y)) {\n          return;\n        }\n        yValues.push(y);\n        yNode = y;\n      }\n\n      var xyCoords = ( x + \"-\" +  yNode);\n      if (xyCoords in coincidentCoordinateCheck) {\n        // Proceed to next iteration if the x y pair already exists\n        // d3's Voronoi cannot handle NaN values or coincident coords\n        // But we push them into xValues and yValues above because\n        // we still may handle them there (labels, etc.)\n        return;\n      }\n      coincidentCoordinateCheck[xyCoords] = '';\n      var pointItem = {\n        coord: {\n          x: x,\n          y: yNode,\n        },\n        id: ( series.name + \"-\" +  idx)\n      };\n      allValues.push(pointItem);\n    });\n  });\n\n  return {\n    allValues: allValues,\n    xValues: xValues,\n    yValues: yValues\n  };\n};\n\n\nexports.shade = function(hex, percent)  {\n\n  var R, G, B, red, green, blue, number;\n  var min = Math.min, round = Math.round;\n  if(hex.length !== 7) { return hex; }\n  number = parseInt(hex.slice(1), 16);\n  R = number >> 16;\n  G = number >> 8 & 0xFF;\n  B = number & 0xFF;\n  red = min( 255, round( ( 1 + percent ) * R )).toString(16);\n  green = min( 255, round( ( 1 + percent ) * G )).toString(16);\n  blue = min( 255, round( ( 1 + percent ) * B )).toString(16);\n  return (\"#\" +  red +  green +  blue);\n\n};\n\n\n},{}]},{},[1])(1)\n});"],"file":"react-d3.js","sourceRoot":"/source/"}